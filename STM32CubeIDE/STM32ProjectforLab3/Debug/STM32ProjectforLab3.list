
STM32ProjectforLab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080031d0  080031d0  000131d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031f4  080031f4  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080031f4  080031f4  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031f4  080031f4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031f4  080031f4  000131f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031f8  080031f8  000131f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080031fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000060  0800325c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  0800325c  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ebc  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001afb  00000000  00000000  00028f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002aa40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002b4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b88  00000000  00000000  0002be98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b62d  00000000  00000000  00042a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000827e2  00000000  00000000  0004e04d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d082f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a24  00000000  00000000  000d0880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	080031b8 	.word	0x080031b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	080031b8 	.word	0x080031b8

0800014c <display_number_on_led_1>:
SCAN_LED_STATUS scan_led_status_2 = INIT;

int led_buffer_1[2] = {0, 0};
int led_buffer_2[2] = {0, 0};

void display_number_on_led_1(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if( num == 0){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	d122      	bne.n	80001a0 <display_number_on_led_1+0x54>
		HAL_GPIO_WritePin(SEG_0_1_GPIO_Port, SEG_0_1_Pin, GPIO_PIN_RESET);
 800015a:	2200      	movs	r2, #0
 800015c:	2101      	movs	r1, #1
 800015e:	48bd      	ldr	r0, [pc, #756]	; (8000454 <display_number_on_led_1+0x308>)
 8000160:	f002 f81f 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_1_GPIO_Port, SEG_1_1_Pin, GPIO_PIN_RESET);
 8000164:	2200      	movs	r2, #0
 8000166:	2102      	movs	r1, #2
 8000168:	48ba      	ldr	r0, [pc, #744]	; (8000454 <display_number_on_led_1+0x308>)
 800016a:	f002 f81a 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_1_GPIO_Port, SEG_2_1_Pin, GPIO_PIN_RESET);
 800016e:	2200      	movs	r2, #0
 8000170:	2104      	movs	r1, #4
 8000172:	48b8      	ldr	r0, [pc, #736]	; (8000454 <display_number_on_led_1+0x308>)
 8000174:	f002 f815 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_1_GPIO_Port, SEG_3_1_Pin, GPIO_PIN_RESET);
 8000178:	2200      	movs	r2, #0
 800017a:	2108      	movs	r1, #8
 800017c:	48b5      	ldr	r0, [pc, #724]	; (8000454 <display_number_on_led_1+0x308>)
 800017e:	f002 f810 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_1_GPIO_Port, SEG_4_1_Pin, GPIO_PIN_RESET);
 8000182:	2200      	movs	r2, #0
 8000184:	2110      	movs	r1, #16
 8000186:	48b3      	ldr	r0, [pc, #716]	; (8000454 <display_number_on_led_1+0x308>)
 8000188:	f002 f80b 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_1_GPIO_Port, SEG_5_1_Pin, GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2120      	movs	r1, #32
 8000190:	48b0      	ldr	r0, [pc, #704]	; (8000454 <display_number_on_led_1+0x308>)
 8000192:	f002 f806 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_1_GPIO_Port, SEG_6_1_Pin, GPIO_PIN_SET);
 8000196:	2201      	movs	r2, #1
 8000198:	2140      	movs	r1, #64	; 0x40
 800019a:	48ae      	ldr	r0, [pc, #696]	; (8000454 <display_number_on_led_1+0x308>)
 800019c:	f002 f801 	bl	80021a2 <HAL_GPIO_WritePin>
	}

	if(num == 1){
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2b01      	cmp	r3, #1
 80001a4:	d122      	bne.n	80001ec <display_number_on_led_1+0xa0>
		HAL_GPIO_WritePin(SEG_0_1_GPIO_Port, SEG_0_1_Pin, GPIO_PIN_SET);
 80001a6:	2201      	movs	r2, #1
 80001a8:	2101      	movs	r1, #1
 80001aa:	48aa      	ldr	r0, [pc, #680]	; (8000454 <display_number_on_led_1+0x308>)
 80001ac:	f001 fff9 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_1_GPIO_Port, SEG_1_1_Pin, GPIO_PIN_RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	2102      	movs	r1, #2
 80001b4:	48a7      	ldr	r0, [pc, #668]	; (8000454 <display_number_on_led_1+0x308>)
 80001b6:	f001 fff4 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_1_GPIO_Port, SEG_2_1_Pin, GPIO_PIN_RESET);
 80001ba:	2200      	movs	r2, #0
 80001bc:	2104      	movs	r1, #4
 80001be:	48a5      	ldr	r0, [pc, #660]	; (8000454 <display_number_on_led_1+0x308>)
 80001c0:	f001 ffef 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_1_GPIO_Port, SEG_3_1_Pin, GPIO_PIN_SET );
 80001c4:	2201      	movs	r2, #1
 80001c6:	2108      	movs	r1, #8
 80001c8:	48a2      	ldr	r0, [pc, #648]	; (8000454 <display_number_on_led_1+0x308>)
 80001ca:	f001 ffea 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_1_GPIO_Port, SEG_4_1_Pin, GPIO_PIN_SET);
 80001ce:	2201      	movs	r2, #1
 80001d0:	2110      	movs	r1, #16
 80001d2:	48a0      	ldr	r0, [pc, #640]	; (8000454 <display_number_on_led_1+0x308>)
 80001d4:	f001 ffe5 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_1_GPIO_Port, SEG_5_1_Pin, GPIO_PIN_SET);
 80001d8:	2201      	movs	r2, #1
 80001da:	2120      	movs	r1, #32
 80001dc:	489d      	ldr	r0, [pc, #628]	; (8000454 <display_number_on_led_1+0x308>)
 80001de:	f001 ffe0 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_1_GPIO_Port, SEG_6_1_Pin, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2140      	movs	r1, #64	; 0x40
 80001e6:	489b      	ldr	r0, [pc, #620]	; (8000454 <display_number_on_led_1+0x308>)
 80001e8:	f001 ffdb 	bl	80021a2 <HAL_GPIO_WritePin>
	}

	if(num == 2){
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2b02      	cmp	r3, #2
 80001f0:	d122      	bne.n	8000238 <display_number_on_led_1+0xec>
		HAL_GPIO_WritePin(SEG_0_1_GPIO_Port, SEG_0_1_Pin, GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2101      	movs	r1, #1
 80001f6:	4897      	ldr	r0, [pc, #604]	; (8000454 <display_number_on_led_1+0x308>)
 80001f8:	f001 ffd3 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_1_GPIO_Port, SEG_1_1_Pin, GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2102      	movs	r1, #2
 8000200:	4894      	ldr	r0, [pc, #592]	; (8000454 <display_number_on_led_1+0x308>)
 8000202:	f001 ffce 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_1_GPIO_Port, SEG_2_1_Pin, GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2104      	movs	r1, #4
 800020a:	4892      	ldr	r0, [pc, #584]	; (8000454 <display_number_on_led_1+0x308>)
 800020c:	f001 ffc9 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_1_GPIO_Port, SEG_3_1_Pin, GPIO_PIN_RESET);
 8000210:	2200      	movs	r2, #0
 8000212:	2108      	movs	r1, #8
 8000214:	488f      	ldr	r0, [pc, #572]	; (8000454 <display_number_on_led_1+0x308>)
 8000216:	f001 ffc4 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_1_GPIO_Port, SEG_4_1_Pin, GPIO_PIN_RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	2110      	movs	r1, #16
 800021e:	488d      	ldr	r0, [pc, #564]	; (8000454 <display_number_on_led_1+0x308>)
 8000220:	f001 ffbf 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_1_GPIO_Port, SEG_5_1_Pin, GPIO_PIN_SET);
 8000224:	2201      	movs	r2, #1
 8000226:	2120      	movs	r1, #32
 8000228:	488a      	ldr	r0, [pc, #552]	; (8000454 <display_number_on_led_1+0x308>)
 800022a:	f001 ffba 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_1_GPIO_Port, SEG_6_1_Pin, GPIO_PIN_RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	2140      	movs	r1, #64	; 0x40
 8000232:	4888      	ldr	r0, [pc, #544]	; (8000454 <display_number_on_led_1+0x308>)
 8000234:	f001 ffb5 	bl	80021a2 <HAL_GPIO_WritePin>
	}

	if(num == 3){
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2b03      	cmp	r3, #3
 800023c:	d122      	bne.n	8000284 <display_number_on_led_1+0x138>
		HAL_GPIO_WritePin(SEG_0_1_GPIO_Port, SEG_0_1_Pin, GPIO_PIN_RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	2101      	movs	r1, #1
 8000242:	4884      	ldr	r0, [pc, #528]	; (8000454 <display_number_on_led_1+0x308>)
 8000244:	f001 ffad 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_1_GPIO_Port, SEG_1_1_Pin, GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	2102      	movs	r1, #2
 800024c:	4881      	ldr	r0, [pc, #516]	; (8000454 <display_number_on_led_1+0x308>)
 800024e:	f001 ffa8 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_1_GPIO_Port, SEG_2_1_Pin, GPIO_PIN_RESET);
 8000252:	2200      	movs	r2, #0
 8000254:	2104      	movs	r1, #4
 8000256:	487f      	ldr	r0, [pc, #508]	; (8000454 <display_number_on_led_1+0x308>)
 8000258:	f001 ffa3 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_1_GPIO_Port, SEG_3_1_Pin, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	2108      	movs	r1, #8
 8000260:	487c      	ldr	r0, [pc, #496]	; (8000454 <display_number_on_led_1+0x308>)
 8000262:	f001 ff9e 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_1_GPIO_Port, SEG_4_1_Pin, GPIO_PIN_SET);
 8000266:	2201      	movs	r2, #1
 8000268:	2110      	movs	r1, #16
 800026a:	487a      	ldr	r0, [pc, #488]	; (8000454 <display_number_on_led_1+0x308>)
 800026c:	f001 ff99 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_1_GPIO_Port, SEG_5_1_Pin, GPIO_PIN_SET);
 8000270:	2201      	movs	r2, #1
 8000272:	2120      	movs	r1, #32
 8000274:	4877      	ldr	r0, [pc, #476]	; (8000454 <display_number_on_led_1+0x308>)
 8000276:	f001 ff94 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_1_GPIO_Port, SEG_6_1_Pin, GPIO_PIN_RESET);
 800027a:	2200      	movs	r2, #0
 800027c:	2140      	movs	r1, #64	; 0x40
 800027e:	4875      	ldr	r0, [pc, #468]	; (8000454 <display_number_on_led_1+0x308>)
 8000280:	f001 ff8f 	bl	80021a2 <HAL_GPIO_WritePin>
	}

	if(num == 4){
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2b04      	cmp	r3, #4
 8000288:	d122      	bne.n	80002d0 <display_number_on_led_1+0x184>
		HAL_GPIO_WritePin(SEG_0_1_GPIO_Port, SEG_0_1_Pin, GPIO_PIN_SET);
 800028a:	2201      	movs	r2, #1
 800028c:	2101      	movs	r1, #1
 800028e:	4871      	ldr	r0, [pc, #452]	; (8000454 <display_number_on_led_1+0x308>)
 8000290:	f001 ff87 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_1_GPIO_Port, SEG_1_1_Pin, GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2102      	movs	r1, #2
 8000298:	486e      	ldr	r0, [pc, #440]	; (8000454 <display_number_on_led_1+0x308>)
 800029a:	f001 ff82 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_1_GPIO_Port, SEG_2_1_Pin, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2104      	movs	r1, #4
 80002a2:	486c      	ldr	r0, [pc, #432]	; (8000454 <display_number_on_led_1+0x308>)
 80002a4:	f001 ff7d 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_1_GPIO_Port, SEG_3_1_Pin, GPIO_PIN_SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	2108      	movs	r1, #8
 80002ac:	4869      	ldr	r0, [pc, #420]	; (8000454 <display_number_on_led_1+0x308>)
 80002ae:	f001 ff78 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_1_GPIO_Port, SEG_4_1_Pin, GPIO_PIN_SET);
 80002b2:	2201      	movs	r2, #1
 80002b4:	2110      	movs	r1, #16
 80002b6:	4867      	ldr	r0, [pc, #412]	; (8000454 <display_number_on_led_1+0x308>)
 80002b8:	f001 ff73 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_1_GPIO_Port, SEG_5_1_Pin, GPIO_PIN_RESET);
 80002bc:	2200      	movs	r2, #0
 80002be:	2120      	movs	r1, #32
 80002c0:	4864      	ldr	r0, [pc, #400]	; (8000454 <display_number_on_led_1+0x308>)
 80002c2:	f001 ff6e 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_1_GPIO_Port, SEG_6_1_Pin, GPIO_PIN_RESET);
 80002c6:	2200      	movs	r2, #0
 80002c8:	2140      	movs	r1, #64	; 0x40
 80002ca:	4862      	ldr	r0, [pc, #392]	; (8000454 <display_number_on_led_1+0x308>)
 80002cc:	f001 ff69 	bl	80021a2 <HAL_GPIO_WritePin>
	}

	if(num == 5){
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2b05      	cmp	r3, #5
 80002d4:	d122      	bne.n	800031c <display_number_on_led_1+0x1d0>
		HAL_GPIO_WritePin(SEG_0_1_GPIO_Port, SEG_0_1_Pin, GPIO_PIN_RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2101      	movs	r1, #1
 80002da:	485e      	ldr	r0, [pc, #376]	; (8000454 <display_number_on_led_1+0x308>)
 80002dc:	f001 ff61 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_1_GPIO_Port, SEG_1_1_Pin, GPIO_PIN_SET);
 80002e0:	2201      	movs	r2, #1
 80002e2:	2102      	movs	r1, #2
 80002e4:	485b      	ldr	r0, [pc, #364]	; (8000454 <display_number_on_led_1+0x308>)
 80002e6:	f001 ff5c 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_1_GPIO_Port, SEG_2_1_Pin, GPIO_PIN_RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2104      	movs	r1, #4
 80002ee:	4859      	ldr	r0, [pc, #356]	; (8000454 <display_number_on_led_1+0x308>)
 80002f0:	f001 ff57 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_1_GPIO_Port, SEG_3_1_Pin, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2108      	movs	r1, #8
 80002f8:	4856      	ldr	r0, [pc, #344]	; (8000454 <display_number_on_led_1+0x308>)
 80002fa:	f001 ff52 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_1_GPIO_Port, SEG_4_1_Pin, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2110      	movs	r1, #16
 8000302:	4854      	ldr	r0, [pc, #336]	; (8000454 <display_number_on_led_1+0x308>)
 8000304:	f001 ff4d 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_1_GPIO_Port, SEG_5_1_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2120      	movs	r1, #32
 800030c:	4851      	ldr	r0, [pc, #324]	; (8000454 <display_number_on_led_1+0x308>)
 800030e:	f001 ff48 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_1_GPIO_Port, SEG_6_1_Pin, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2140      	movs	r1, #64	; 0x40
 8000316:	484f      	ldr	r0, [pc, #316]	; (8000454 <display_number_on_led_1+0x308>)
 8000318:	f001 ff43 	bl	80021a2 <HAL_GPIO_WritePin>
	}

	if(num == 6){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b06      	cmp	r3, #6
 8000320:	d122      	bne.n	8000368 <display_number_on_led_1+0x21c>
		HAL_GPIO_WritePin(SEG_0_1_GPIO_Port, SEG_0_1_Pin, GPIO_PIN_RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	2101      	movs	r1, #1
 8000326:	484b      	ldr	r0, [pc, #300]	; (8000454 <display_number_on_led_1+0x308>)
 8000328:	f001 ff3b 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_1_GPIO_Port, SEG_1_1_Pin, GPIO_PIN_SET);
 800032c:	2201      	movs	r2, #1
 800032e:	2102      	movs	r1, #2
 8000330:	4848      	ldr	r0, [pc, #288]	; (8000454 <display_number_on_led_1+0x308>)
 8000332:	f001 ff36 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_1_GPIO_Port, SEG_2_1_Pin, GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	2104      	movs	r1, #4
 800033a:	4846      	ldr	r0, [pc, #280]	; (8000454 <display_number_on_led_1+0x308>)
 800033c:	f001 ff31 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_1_GPIO_Port, SEG_3_1_Pin, GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	2108      	movs	r1, #8
 8000344:	4843      	ldr	r0, [pc, #268]	; (8000454 <display_number_on_led_1+0x308>)
 8000346:	f001 ff2c 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_1_GPIO_Port, SEG_4_1_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	2110      	movs	r1, #16
 800034e:	4841      	ldr	r0, [pc, #260]	; (8000454 <display_number_on_led_1+0x308>)
 8000350:	f001 ff27 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_1_GPIO_Port, SEG_5_1_Pin, GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	2120      	movs	r1, #32
 8000358:	483e      	ldr	r0, [pc, #248]	; (8000454 <display_number_on_led_1+0x308>)
 800035a:	f001 ff22 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_1_GPIO_Port, SEG_6_1_Pin, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	2140      	movs	r1, #64	; 0x40
 8000362:	483c      	ldr	r0, [pc, #240]	; (8000454 <display_number_on_led_1+0x308>)
 8000364:	f001 ff1d 	bl	80021a2 <HAL_GPIO_WritePin>
	}

	if(num == 7){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2b07      	cmp	r3, #7
 800036c:	d122      	bne.n	80003b4 <display_number_on_led_1+0x268>
		HAL_GPIO_WritePin(SEG_0_1_GPIO_Port, SEG_0_1_Pin, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2101      	movs	r1, #1
 8000372:	4838      	ldr	r0, [pc, #224]	; (8000454 <display_number_on_led_1+0x308>)
 8000374:	f001 ff15 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_1_GPIO_Port, SEG_1_1_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2102      	movs	r1, #2
 800037c:	4835      	ldr	r0, [pc, #212]	; (8000454 <display_number_on_led_1+0x308>)
 800037e:	f001 ff10 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_1_GPIO_Port, SEG_2_1_Pin, GPIO_PIN_RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	2104      	movs	r1, #4
 8000386:	4833      	ldr	r0, [pc, #204]	; (8000454 <display_number_on_led_1+0x308>)
 8000388:	f001 ff0b 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_1_GPIO_Port, SEG_3_1_Pin, GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	2108      	movs	r1, #8
 8000390:	4830      	ldr	r0, [pc, #192]	; (8000454 <display_number_on_led_1+0x308>)
 8000392:	f001 ff06 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_1_GPIO_Port, SEG_4_1_Pin, GPIO_PIN_SET);
 8000396:	2201      	movs	r2, #1
 8000398:	2110      	movs	r1, #16
 800039a:	482e      	ldr	r0, [pc, #184]	; (8000454 <display_number_on_led_1+0x308>)
 800039c:	f001 ff01 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_1_GPIO_Port, SEG_5_1_Pin, GPIO_PIN_SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2120      	movs	r1, #32
 80003a4:	482b      	ldr	r0, [pc, #172]	; (8000454 <display_number_on_led_1+0x308>)
 80003a6:	f001 fefc 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_1_GPIO_Port, SEG_6_1_Pin, GPIO_PIN_SET);
 80003aa:	2201      	movs	r2, #1
 80003ac:	2140      	movs	r1, #64	; 0x40
 80003ae:	4829      	ldr	r0, [pc, #164]	; (8000454 <display_number_on_led_1+0x308>)
 80003b0:	f001 fef7 	bl	80021a2 <HAL_GPIO_WritePin>
	}

	if(num == 8){
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2b08      	cmp	r3, #8
 80003b8:	d122      	bne.n	8000400 <display_number_on_led_1+0x2b4>
		HAL_GPIO_WritePin(SEG_0_1_GPIO_Port, SEG_0_1_Pin, GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2101      	movs	r1, #1
 80003be:	4825      	ldr	r0, [pc, #148]	; (8000454 <display_number_on_led_1+0x308>)
 80003c0:	f001 feef 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_1_GPIO_Port, SEG_1_1_Pin, GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2102      	movs	r1, #2
 80003c8:	4822      	ldr	r0, [pc, #136]	; (8000454 <display_number_on_led_1+0x308>)
 80003ca:	f001 feea 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_1_GPIO_Port, SEG_2_1_Pin, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2104      	movs	r1, #4
 80003d2:	4820      	ldr	r0, [pc, #128]	; (8000454 <display_number_on_led_1+0x308>)
 80003d4:	f001 fee5 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_1_GPIO_Port, SEG_3_1_Pin, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2108      	movs	r1, #8
 80003dc:	481d      	ldr	r0, [pc, #116]	; (8000454 <display_number_on_led_1+0x308>)
 80003de:	f001 fee0 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_1_GPIO_Port, SEG_4_1_Pin, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2110      	movs	r1, #16
 80003e6:	481b      	ldr	r0, [pc, #108]	; (8000454 <display_number_on_led_1+0x308>)
 80003e8:	f001 fedb 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_1_GPIO_Port, SEG_5_1_Pin, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2120      	movs	r1, #32
 80003f0:	4818      	ldr	r0, [pc, #96]	; (8000454 <display_number_on_led_1+0x308>)
 80003f2:	f001 fed6 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_1_GPIO_Port, SEG_6_1_Pin, GPIO_PIN_RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2140      	movs	r1, #64	; 0x40
 80003fa:	4816      	ldr	r0, [pc, #88]	; (8000454 <display_number_on_led_1+0x308>)
 80003fc:	f001 fed1 	bl	80021a2 <HAL_GPIO_WritePin>
	}

	if(num == 9){
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d122      	bne.n	800044c <display_number_on_led_1+0x300>
		HAL_GPIO_WritePin(SEG_0_1_GPIO_Port, SEG_0_1_Pin, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2101      	movs	r1, #1
 800040a:	4812      	ldr	r0, [pc, #72]	; (8000454 <display_number_on_led_1+0x308>)
 800040c:	f001 fec9 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_1_GPIO_Port, SEG_1_1_Pin, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2102      	movs	r1, #2
 8000414:	480f      	ldr	r0, [pc, #60]	; (8000454 <display_number_on_led_1+0x308>)
 8000416:	f001 fec4 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_1_GPIO_Port, SEG_2_1_Pin, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2104      	movs	r1, #4
 800041e:	480d      	ldr	r0, [pc, #52]	; (8000454 <display_number_on_led_1+0x308>)
 8000420:	f001 febf 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_1_GPIO_Port, SEG_3_1_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2108      	movs	r1, #8
 8000428:	480a      	ldr	r0, [pc, #40]	; (8000454 <display_number_on_led_1+0x308>)
 800042a:	f001 feba 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_1_GPIO_Port, SEG_4_1_Pin, GPIO_PIN_SET);
 800042e:	2201      	movs	r2, #1
 8000430:	2110      	movs	r1, #16
 8000432:	4808      	ldr	r0, [pc, #32]	; (8000454 <display_number_on_led_1+0x308>)
 8000434:	f001 feb5 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_1_GPIO_Port, SEG_5_1_Pin, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2120      	movs	r1, #32
 800043c:	4805      	ldr	r0, [pc, #20]	; (8000454 <display_number_on_led_1+0x308>)
 800043e:	f001 feb0 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_1_GPIO_Port, SEG_6_1_Pin, GPIO_PIN_RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	2140      	movs	r1, #64	; 0x40
 8000446:	4803      	ldr	r0, [pc, #12]	; (8000454 <display_number_on_led_1+0x308>)
 8000448:	f001 feab 	bl	80021a2 <HAL_GPIO_WritePin>
	}
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40010c00 	.word	0x40010c00

08000458 <display_number_on_led_2>:

void display_number_on_led_2(int num){
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	if( num == 0){
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d128      	bne.n	80004b8 <display_number_on_led_2+0x60>
		HAL_GPIO_WritePin(SEG_0_2_GPIO_Port, SEG_0_2_Pin, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	2180      	movs	r1, #128	; 0x80
 800046a:	48cf      	ldr	r0, [pc, #828]	; (80007a8 <display_number_on_led_2+0x350>)
 800046c:	f001 fe99 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_2_GPIO_Port, SEG_1_2_Pin, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000476:	48cc      	ldr	r0, [pc, #816]	; (80007a8 <display_number_on_led_2+0x350>)
 8000478:	f001 fe93 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_2_GPIO_Port, SEG_2_2_Pin, GPIO_PIN_RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000482:	48c9      	ldr	r0, [pc, #804]	; (80007a8 <display_number_on_led_2+0x350>)
 8000484:	f001 fe8d 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_2_GPIO_Port, SEG_3_2_Pin, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800048e:	48c6      	ldr	r0, [pc, #792]	; (80007a8 <display_number_on_led_2+0x350>)
 8000490:	f001 fe87 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_2_GPIO_Port, SEG_4_2_Pin, GPIO_PIN_RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800049a:	48c3      	ldr	r0, [pc, #780]	; (80007a8 <display_number_on_led_2+0x350>)
 800049c:	f001 fe81 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_2_GPIO_Port, SEG_5_2_Pin, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a6:	48c0      	ldr	r0, [pc, #768]	; (80007a8 <display_number_on_led_2+0x350>)
 80004a8:	f001 fe7b 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_2_GPIO_Port, SEG_6_2_Pin, GPIO_PIN_SET);
 80004ac:	2201      	movs	r2, #1
 80004ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b2:	48bd      	ldr	r0, [pc, #756]	; (80007a8 <display_number_on_led_2+0x350>)
 80004b4:	f001 fe75 	bl	80021a2 <HAL_GPIO_WritePin>
	}

	if(num == 1){
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d128      	bne.n	8000510 <display_number_on_led_2+0xb8>
		HAL_GPIO_WritePin(SEG_0_2_GPIO_Port, SEG_0_2_Pin, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	48b9      	ldr	r0, [pc, #740]	; (80007a8 <display_number_on_led_2+0x350>)
 80004c4:	f001 fe6d 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_2_GPIO_Port, SEG_1_2_Pin, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ce:	48b6      	ldr	r0, [pc, #728]	; (80007a8 <display_number_on_led_2+0x350>)
 80004d0:	f001 fe67 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_2_GPIO_Port, SEG_2_2_Pin, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004da:	48b3      	ldr	r0, [pc, #716]	; (80007a8 <display_number_on_led_2+0x350>)
 80004dc:	f001 fe61 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_2_GPIO_Port, SEG_3_2_Pin, GPIO_PIN_SET );
 80004e0:	2201      	movs	r2, #1
 80004e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e6:	48b0      	ldr	r0, [pc, #704]	; (80007a8 <display_number_on_led_2+0x350>)
 80004e8:	f001 fe5b 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_2_GPIO_Port, SEG_4_2_Pin, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f2:	48ad      	ldr	r0, [pc, #692]	; (80007a8 <display_number_on_led_2+0x350>)
 80004f4:	f001 fe55 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_2_GPIO_Port, SEG_5_2_Pin, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004fe:	48aa      	ldr	r0, [pc, #680]	; (80007a8 <display_number_on_led_2+0x350>)
 8000500:	f001 fe4f 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_2_GPIO_Port, SEG_6_2_Pin, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800050a:	48a7      	ldr	r0, [pc, #668]	; (80007a8 <display_number_on_led_2+0x350>)
 800050c:	f001 fe49 	bl	80021a2 <HAL_GPIO_WritePin>
	}

	if(num == 2){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b02      	cmp	r3, #2
 8000514:	d128      	bne.n	8000568 <display_number_on_led_2+0x110>
		HAL_GPIO_WritePin(SEG_0_2_GPIO_Port, SEG_0_2_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	2180      	movs	r1, #128	; 0x80
 800051a:	48a3      	ldr	r0, [pc, #652]	; (80007a8 <display_number_on_led_2+0x350>)
 800051c:	f001 fe41 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_2_GPIO_Port, SEG_1_2_Pin, GPIO_PIN_RESET);
 8000520:	2200      	movs	r2, #0
 8000522:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000526:	48a0      	ldr	r0, [pc, #640]	; (80007a8 <display_number_on_led_2+0x350>)
 8000528:	f001 fe3b 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_2_GPIO_Port, SEG_2_2_Pin, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000532:	489d      	ldr	r0, [pc, #628]	; (80007a8 <display_number_on_led_2+0x350>)
 8000534:	f001 fe35 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_2_GPIO_Port, SEG_3_2_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053e:	489a      	ldr	r0, [pc, #616]	; (80007a8 <display_number_on_led_2+0x350>)
 8000540:	f001 fe2f 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_2_GPIO_Port, SEG_4_2_Pin, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800054a:	4897      	ldr	r0, [pc, #604]	; (80007a8 <display_number_on_led_2+0x350>)
 800054c:	f001 fe29 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_2_GPIO_Port, SEG_5_2_Pin, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000556:	4894      	ldr	r0, [pc, #592]	; (80007a8 <display_number_on_led_2+0x350>)
 8000558:	f001 fe23 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_2_GPIO_Port, SEG_6_2_Pin, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000562:	4891      	ldr	r0, [pc, #580]	; (80007a8 <display_number_on_led_2+0x350>)
 8000564:	f001 fe1d 	bl	80021a2 <HAL_GPIO_WritePin>
	}

	if(num == 3){
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b03      	cmp	r3, #3
 800056c:	d128      	bne.n	80005c0 <display_number_on_led_2+0x168>
		HAL_GPIO_WritePin(SEG_0_2_GPIO_Port, SEG_0_2_Pin, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	2180      	movs	r1, #128	; 0x80
 8000572:	488d      	ldr	r0, [pc, #564]	; (80007a8 <display_number_on_led_2+0x350>)
 8000574:	f001 fe15 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_2_GPIO_Port, SEG_1_2_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800057e:	488a      	ldr	r0, [pc, #552]	; (80007a8 <display_number_on_led_2+0x350>)
 8000580:	f001 fe0f 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_2_GPIO_Port, SEG_2_2_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 7100 	mov.w	r1, #512	; 0x200
 800058a:	4887      	ldr	r0, [pc, #540]	; (80007a8 <display_number_on_led_2+0x350>)
 800058c:	f001 fe09 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_2_GPIO_Port, SEG_3_2_Pin, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000596:	4884      	ldr	r0, [pc, #528]	; (80007a8 <display_number_on_led_2+0x350>)
 8000598:	f001 fe03 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_2_GPIO_Port, SEG_4_2_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005a2:	4881      	ldr	r0, [pc, #516]	; (80007a8 <display_number_on_led_2+0x350>)
 80005a4:	f001 fdfd 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_2_GPIO_Port, SEG_5_2_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ae:	487e      	ldr	r0, [pc, #504]	; (80007a8 <display_number_on_led_2+0x350>)
 80005b0:	f001 fdf7 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_2_GPIO_Port, SEG_6_2_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ba:	487b      	ldr	r0, [pc, #492]	; (80007a8 <display_number_on_led_2+0x350>)
 80005bc:	f001 fdf1 	bl	80021a2 <HAL_GPIO_WritePin>
	}

	if(num == 4){
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	d128      	bne.n	8000618 <display_number_on_led_2+0x1c0>
		HAL_GPIO_WritePin(SEG_0_2_GPIO_Port, SEG_0_2_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	4877      	ldr	r0, [pc, #476]	; (80007a8 <display_number_on_led_2+0x350>)
 80005cc:	f001 fde9 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_2_GPIO_Port, SEG_1_2_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d6:	4874      	ldr	r0, [pc, #464]	; (80007a8 <display_number_on_led_2+0x350>)
 80005d8:	f001 fde3 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_2_GPIO_Port, SEG_2_2_Pin, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e2:	4871      	ldr	r0, [pc, #452]	; (80007a8 <display_number_on_led_2+0x350>)
 80005e4:	f001 fddd 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_2_GPIO_Port, SEG_3_2_Pin, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ee:	486e      	ldr	r0, [pc, #440]	; (80007a8 <display_number_on_led_2+0x350>)
 80005f0:	f001 fdd7 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_2_GPIO_Port, SEG_4_2_Pin, GPIO_PIN_SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005fa:	486b      	ldr	r0, [pc, #428]	; (80007a8 <display_number_on_led_2+0x350>)
 80005fc:	f001 fdd1 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_2_GPIO_Port, SEG_5_2_Pin, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000606:	4868      	ldr	r0, [pc, #416]	; (80007a8 <display_number_on_led_2+0x350>)
 8000608:	f001 fdcb 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_2_GPIO_Port, SEG_6_2_Pin, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000612:	4865      	ldr	r0, [pc, #404]	; (80007a8 <display_number_on_led_2+0x350>)
 8000614:	f001 fdc5 	bl	80021a2 <HAL_GPIO_WritePin>
	}

	if(num == 5){
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b05      	cmp	r3, #5
 800061c:	d128      	bne.n	8000670 <display_number_on_led_2+0x218>
		HAL_GPIO_WritePin(SEG_0_2_GPIO_Port, SEG_0_2_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	4861      	ldr	r0, [pc, #388]	; (80007a8 <display_number_on_led_2+0x350>)
 8000624:	f001 fdbd 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_2_GPIO_Port, SEG_1_2_Pin, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062e:	485e      	ldr	r0, [pc, #376]	; (80007a8 <display_number_on_led_2+0x350>)
 8000630:	f001 fdb7 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_2_GPIO_Port, SEG_2_2_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 7100 	mov.w	r1, #512	; 0x200
 800063a:	485b      	ldr	r0, [pc, #364]	; (80007a8 <display_number_on_led_2+0x350>)
 800063c:	f001 fdb1 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_2_GPIO_Port, SEG_3_2_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000646:	4858      	ldr	r0, [pc, #352]	; (80007a8 <display_number_on_led_2+0x350>)
 8000648:	f001 fdab 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_2_GPIO_Port, SEG_4_2_Pin, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000652:	4855      	ldr	r0, [pc, #340]	; (80007a8 <display_number_on_led_2+0x350>)
 8000654:	f001 fda5 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_2_GPIO_Port, SEG_5_2_Pin, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065e:	4852      	ldr	r0, [pc, #328]	; (80007a8 <display_number_on_led_2+0x350>)
 8000660:	f001 fd9f 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_2_GPIO_Port, SEG_6_2_Pin, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066a:	484f      	ldr	r0, [pc, #316]	; (80007a8 <display_number_on_led_2+0x350>)
 800066c:	f001 fd99 	bl	80021a2 <HAL_GPIO_WritePin>
	}

	if(num == 6){
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2b06      	cmp	r3, #6
 8000674:	d128      	bne.n	80006c8 <display_number_on_led_2+0x270>
		HAL_GPIO_WritePin(SEG_0_2_GPIO_Port, SEG_0_2_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	484b      	ldr	r0, [pc, #300]	; (80007a8 <display_number_on_led_2+0x350>)
 800067c:	f001 fd91 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_2_GPIO_Port, SEG_1_2_Pin, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000686:	4848      	ldr	r0, [pc, #288]	; (80007a8 <display_number_on_led_2+0x350>)
 8000688:	f001 fd8b 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_2_GPIO_Port, SEG_2_2_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000692:	4845      	ldr	r0, [pc, #276]	; (80007a8 <display_number_on_led_2+0x350>)
 8000694:	f001 fd85 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_2_GPIO_Port, SEG_3_2_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800069e:	4842      	ldr	r0, [pc, #264]	; (80007a8 <display_number_on_led_2+0x350>)
 80006a0:	f001 fd7f 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_2_GPIO_Port, SEG_4_2_Pin, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006aa:	483f      	ldr	r0, [pc, #252]	; (80007a8 <display_number_on_led_2+0x350>)
 80006ac:	f001 fd79 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_2_GPIO_Port, SEG_5_2_Pin, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b6:	483c      	ldr	r0, [pc, #240]	; (80007a8 <display_number_on_led_2+0x350>)
 80006b8:	f001 fd73 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_2_GPIO_Port, SEG_6_2_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c2:	4839      	ldr	r0, [pc, #228]	; (80007a8 <display_number_on_led_2+0x350>)
 80006c4:	f001 fd6d 	bl	80021a2 <HAL_GPIO_WritePin>
	}

	if(num == 7){
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b07      	cmp	r3, #7
 80006cc:	d128      	bne.n	8000720 <display_number_on_led_2+0x2c8>
		HAL_GPIO_WritePin(SEG_0_2_GPIO_Port, SEG_0_2_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2180      	movs	r1, #128	; 0x80
 80006d2:	4835      	ldr	r0, [pc, #212]	; (80007a8 <display_number_on_led_2+0x350>)
 80006d4:	f001 fd65 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_2_GPIO_Port, SEG_1_2_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006de:	4832      	ldr	r0, [pc, #200]	; (80007a8 <display_number_on_led_2+0x350>)
 80006e0:	f001 fd5f 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_2_GPIO_Port, SEG_2_2_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ea:	482f      	ldr	r0, [pc, #188]	; (80007a8 <display_number_on_led_2+0x350>)
 80006ec:	f001 fd59 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_2_GPIO_Port, SEG_3_2_Pin, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f6:	482c      	ldr	r0, [pc, #176]	; (80007a8 <display_number_on_led_2+0x350>)
 80006f8:	f001 fd53 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_2_GPIO_Port, SEG_4_2_Pin, GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000702:	4829      	ldr	r0, [pc, #164]	; (80007a8 <display_number_on_led_2+0x350>)
 8000704:	f001 fd4d 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_2_GPIO_Port, SEG_5_2_Pin, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800070e:	4826      	ldr	r0, [pc, #152]	; (80007a8 <display_number_on_led_2+0x350>)
 8000710:	f001 fd47 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_2_GPIO_Port, SEG_6_2_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800071a:	4823      	ldr	r0, [pc, #140]	; (80007a8 <display_number_on_led_2+0x350>)
 800071c:	f001 fd41 	bl	80021a2 <HAL_GPIO_WritePin>
	}

	if(num == 8){
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b08      	cmp	r3, #8
 8000724:	d128      	bne.n	8000778 <display_number_on_led_2+0x320>
		HAL_GPIO_WritePin(SEG_0_2_GPIO_Port, SEG_0_2_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2180      	movs	r1, #128	; 0x80
 800072a:	481f      	ldr	r0, [pc, #124]	; (80007a8 <display_number_on_led_2+0x350>)
 800072c:	f001 fd39 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_2_GPIO_Port, SEG_1_2_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000736:	481c      	ldr	r0, [pc, #112]	; (80007a8 <display_number_on_led_2+0x350>)
 8000738:	f001 fd33 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_2_GPIO_Port, SEG_2_2_Pin, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000742:	4819      	ldr	r0, [pc, #100]	; (80007a8 <display_number_on_led_2+0x350>)
 8000744:	f001 fd2d 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_2_GPIO_Port, SEG_3_2_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800074e:	4816      	ldr	r0, [pc, #88]	; (80007a8 <display_number_on_led_2+0x350>)
 8000750:	f001 fd27 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_2_GPIO_Port, SEG_4_2_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800075a:	4813      	ldr	r0, [pc, #76]	; (80007a8 <display_number_on_led_2+0x350>)
 800075c:	f001 fd21 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_2_GPIO_Port, SEG_5_2_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000766:	4810      	ldr	r0, [pc, #64]	; (80007a8 <display_number_on_led_2+0x350>)
 8000768:	f001 fd1b 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_2_GPIO_Port, SEG_6_2_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000772:	480d      	ldr	r0, [pc, #52]	; (80007a8 <display_number_on_led_2+0x350>)
 8000774:	f001 fd15 	bl	80021a2 <HAL_GPIO_WritePin>
	}

	if(num == 9){
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b09      	cmp	r3, #9
 800077c:	d12b      	bne.n	80007d6 <display_number_on_led_2+0x37e>
		HAL_GPIO_WritePin(SEG_0_2_GPIO_Port, SEG_0_2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	4809      	ldr	r0, [pc, #36]	; (80007a8 <display_number_on_led_2+0x350>)
 8000784:	f001 fd0d 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_2_GPIO_Port, SEG_1_2_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078e:	4806      	ldr	r0, [pc, #24]	; (80007a8 <display_number_on_led_2+0x350>)
 8000790:	f001 fd07 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_2_GPIO_Port, SEG_2_2_Pin, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079a:	4803      	ldr	r0, [pc, #12]	; (80007a8 <display_number_on_led_2+0x350>)
 800079c:	f001 fd01 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_2_GPIO_Port, SEG_3_2_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a6:	e001      	b.n	80007ac <display_number_on_led_2+0x354>
 80007a8:	40010c00 	.word	0x40010c00
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <display_number_on_led_2+0x388>)
 80007ae:	f001 fcf8 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_2_GPIO_Port, SEG_4_2_Pin, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b8:	4809      	ldr	r0, [pc, #36]	; (80007e0 <display_number_on_led_2+0x388>)
 80007ba:	f001 fcf2 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_2_GPIO_Port, SEG_5_2_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c4:	4806      	ldr	r0, [pc, #24]	; (80007e0 <display_number_on_led_2+0x388>)
 80007c6:	f001 fcec 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_2_GPIO_Port, SEG_6_2_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d0:	4803      	ldr	r0, [pc, #12]	; (80007e0 <display_number_on_led_2+0x388>)
 80007d2:	f001 fce6 	bl	80021a2 <HAL_GPIO_WritePin>
	}
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40010c00 	.word	0x40010c00

080007e4 <scan_led_1>:

void scan_led_1()
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	switch(scan_led_status_1)
 80007e8:	4b2c      	ldr	r3, [pc, #176]	; (800089c <scan_led_1+0xb8>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b02      	cmp	r3, #2
 80007ee:	d033      	beq.n	8000858 <scan_led_1+0x74>
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	dc4c      	bgt.n	800088e <scan_led_1+0xaa>
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d002      	beq.n	80007fe <scan_led_1+0x1a>
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d012      	beq.n	8000822 <scan_led_1+0x3e>
			scan_led_status_1 = LED_1;
			setTimer2(ON_TIME_OF_A_LED);
		}
		break;
	default:
		break;
 80007fc:	e047      	b.n	800088e <scan_led_1+0xaa>
		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	2102      	movs	r1, #2
 8000802:	4827      	ldr	r0, [pc, #156]	; (80008a0 <scan_led_1+0xbc>)
 8000804:	f001 fccd 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2104      	movs	r1, #4
 800080c:	4824      	ldr	r0, [pc, #144]	; (80008a0 <scan_led_1+0xbc>)
 800080e:	f001 fcc8 	bl	80021a2 <HAL_GPIO_WritePin>
		scan_led_status_1 = LED_1;
 8000812:	4b22      	ldr	r3, [pc, #136]	; (800089c <scan_led_1+0xb8>)
 8000814:	2201      	movs	r2, #1
 8000816:	701a      	strb	r2, [r3, #0]
		setTimer2(ON_TIME_OF_A_LED);
 8000818:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800081c:	f000 fdb6 	bl	800138c <setTimer2>
		break;
 8000820:	e03a      	b.n	8000898 <scan_led_1+0xb4>
		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2102      	movs	r1, #2
 8000826:	481e      	ldr	r0, [pc, #120]	; (80008a0 <scan_led_1+0xbc>)
 8000828:	f001 fcbb 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	2104      	movs	r1, #4
 8000830:	481b      	ldr	r0, [pc, #108]	; (80008a0 <scan_led_1+0xbc>)
 8000832:	f001 fcb6 	bl	80021a2 <HAL_GPIO_WritePin>
		display_number_on_led_1(led_buffer_1[0]);
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <scan_led_1+0xc0>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff fc86 	bl	800014c <display_number_on_led_1>
		if(timer2_flag == 1)
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <scan_led_1+0xc4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d124      	bne.n	8000892 <scan_led_1+0xae>
			scan_led_status_1 = LED_2;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <scan_led_1+0xb8>)
 800084a:	2202      	movs	r2, #2
 800084c:	701a      	strb	r2, [r3, #0]
			setTimer2(ON_TIME_OF_A_LED);
 800084e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000852:	f000 fd9b 	bl	800138c <setTimer2>
		break;
 8000856:	e01c      	b.n	8000892 <scan_led_1+0xae>
		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2102      	movs	r1, #2
 800085c:	4810      	ldr	r0, [pc, #64]	; (80008a0 <scan_led_1+0xbc>)
 800085e:	f001 fca0 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2104      	movs	r1, #4
 8000866:	480e      	ldr	r0, [pc, #56]	; (80008a0 <scan_led_1+0xbc>)
 8000868:	f001 fc9b 	bl	80021a2 <HAL_GPIO_WritePin>
		display_number_on_led_1(led_buffer_1[1]);
 800086c:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <scan_led_1+0xc0>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fc6b 	bl	800014c <display_number_on_led_1>
		if(timer2_flag == 1)
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <scan_led_1+0xc4>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d10b      	bne.n	8000896 <scan_led_1+0xb2>
			scan_led_status_1 = LED_1;
 800087e:	4b07      	ldr	r3, [pc, #28]	; (800089c <scan_led_1+0xb8>)
 8000880:	2201      	movs	r2, #1
 8000882:	701a      	strb	r2, [r3, #0]
			setTimer2(ON_TIME_OF_A_LED);
 8000884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000888:	f000 fd80 	bl	800138c <setTimer2>
		break;
 800088c:	e003      	b.n	8000896 <scan_led_1+0xb2>
		break;
 800088e:	bf00      	nop
 8000890:	e002      	b.n	8000898 <scan_led_1+0xb4>
		break;
 8000892:	bf00      	nop
 8000894:	e000      	b.n	8000898 <scan_led_1+0xb4>
		break;
 8000896:	bf00      	nop
	}
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	2000007c 	.word	0x2000007c
 80008a0:	40010800 	.word	0x40010800
 80008a4:	20000080 	.word	0x20000080
 80008a8:	200000f4 	.word	0x200000f4

080008ac <scan_led_2>:

void scan_led_2()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	switch(scan_led_status_2)
 80008b0:	4b2c      	ldr	r3, [pc, #176]	; (8000964 <scan_led_2+0xb8>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d033      	beq.n	8000920 <scan_led_2+0x74>
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	dc4c      	bgt.n	8000956 <scan_led_2+0xaa>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d002      	beq.n	80008c6 <scan_led_2+0x1a>
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d012      	beq.n	80008ea <scan_led_2+0x3e>
			scan_led_status_2 = LED_1;
			setTimer3(ON_TIME_OF_A_LED);
		}
		break;
	default:
		break;
 80008c4:	e047      	b.n	8000956 <scan_led_2+0xaa>
		HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	2108      	movs	r1, #8
 80008ca:	4827      	ldr	r0, [pc, #156]	; (8000968 <scan_led_2+0xbc>)
 80008cc:	f001 fc69 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2110      	movs	r1, #16
 80008d4:	4824      	ldr	r0, [pc, #144]	; (8000968 <scan_led_2+0xbc>)
 80008d6:	f001 fc64 	bl	80021a2 <HAL_GPIO_WritePin>
		scan_led_status_2 = LED_1;
 80008da:	4b22      	ldr	r3, [pc, #136]	; (8000964 <scan_led_2+0xb8>)
 80008dc:	2201      	movs	r2, #1
 80008de:	701a      	strb	r2, [r3, #0]
		setTimer3(ON_TIME_OF_A_LED);
 80008e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e4:	f000 fd6e 	bl	80013c4 <setTimer3>
		break;
 80008e8:	e03a      	b.n	8000960 <scan_led_2+0xb4>
		HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2108      	movs	r1, #8
 80008ee:	481e      	ldr	r0, [pc, #120]	; (8000968 <scan_led_2+0xbc>)
 80008f0:	f001 fc57 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	2110      	movs	r1, #16
 80008f8:	481b      	ldr	r0, [pc, #108]	; (8000968 <scan_led_2+0xbc>)
 80008fa:	f001 fc52 	bl	80021a2 <HAL_GPIO_WritePin>
		display_number_on_led_2(led_buffer_2[0]);
 80008fe:	4b1b      	ldr	r3, [pc, #108]	; (800096c <scan_led_2+0xc0>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fda8 	bl	8000458 <display_number_on_led_2>
		if(timer3_flag == 1)
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <scan_led_2+0xc4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d124      	bne.n	800095a <scan_led_2+0xae>
			scan_led_status_2 = LED_2;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <scan_led_2+0xb8>)
 8000912:	2202      	movs	r2, #2
 8000914:	701a      	strb	r2, [r3, #0]
			setTimer3(ON_TIME_OF_A_LED);
 8000916:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091a:	f000 fd53 	bl	80013c4 <setTimer3>
		break;
 800091e:	e01c      	b.n	800095a <scan_led_2+0xae>
		HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, GPIO_PIN_SET);
 8000920:	2201      	movs	r2, #1
 8000922:	2108      	movs	r1, #8
 8000924:	4810      	ldr	r0, [pc, #64]	; (8000968 <scan_led_2+0xbc>)
 8000926:	f001 fc3c 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2110      	movs	r1, #16
 800092e:	480e      	ldr	r0, [pc, #56]	; (8000968 <scan_led_2+0xbc>)
 8000930:	f001 fc37 	bl	80021a2 <HAL_GPIO_WritePin>
		display_number_on_led_2(led_buffer_2[1]);
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <scan_led_2+0xc0>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fd8d 	bl	8000458 <display_number_on_led_2>
		if(timer3_flag == 1)
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <scan_led_2+0xc4>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d10b      	bne.n	800095e <scan_led_2+0xb2>
			scan_led_status_2 = LED_1;
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <scan_led_2+0xb8>)
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
			setTimer3(ON_TIME_OF_A_LED);
 800094c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000950:	f000 fd38 	bl	80013c4 <setTimer3>
		break;
 8000954:	e003      	b.n	800095e <scan_led_2+0xb2>
		break;
 8000956:	bf00      	nop
 8000958:	e002      	b.n	8000960 <scan_led_2+0xb4>
		break;
 800095a:	bf00      	nop
 800095c:	e000      	b.n	8000960 <scan_led_2+0xb4>
		break;
 800095e:	bf00      	nop
	}
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2000007d 	.word	0x2000007d
 8000968:	40010800 	.word	0x40010800
 800096c:	20000088 	.word	0x20000088
 8000970:	200000fc 	.word	0x200000fc

08000974 <update_led_buffer_1>:

void update_led_buffer_1(int update_value)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	led_buffer_1[0] = update_value/10;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <update_led_buffer_1+0x40>)
 8000980:	fb82 1203 	smull	r1, r2, r2, r3
 8000984:	1092      	asrs	r2, r2, #2
 8000986:	17db      	asrs	r3, r3, #31
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <update_led_buffer_1+0x44>)
 800098c:	6013      	str	r3, [r2, #0]
	led_buffer_1[1]	= update_value%10;
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <update_led_buffer_1+0x40>)
 8000992:	fb83 2301 	smull	r2, r3, r3, r1
 8000996:	109a      	asrs	r2, r3, #2
 8000998:	17cb      	asrs	r3, r1, #31
 800099a:	1ad2      	subs	r2, r2, r3
 800099c:	4613      	mov	r3, r2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	4413      	add	r3, r2
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	1aca      	subs	r2, r1, r3
 80009a6:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <update_led_buffer_1+0x44>)
 80009a8:	605a      	str	r2, [r3, #4]
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	66666667 	.word	0x66666667
 80009b8:	20000080 	.word	0x20000080

080009bc <update_led_buffer_2>:

void update_led_buffer_2(int update_value)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	led_buffer_2[0] = update_value/10;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <update_led_buffer_2+0x40>)
 80009c8:	fb82 1203 	smull	r1, r2, r2, r3
 80009cc:	1092      	asrs	r2, r2, #2
 80009ce:	17db      	asrs	r3, r3, #31
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <update_led_buffer_2+0x44>)
 80009d4:	6013      	str	r3, [r2, #0]
	led_buffer_2[1]	= update_value%10;
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <update_led_buffer_2+0x40>)
 80009da:	fb83 2301 	smull	r2, r3, r3, r1
 80009de:	109a      	asrs	r2, r3, #2
 80009e0:	17cb      	asrs	r3, r1, #31
 80009e2:	1ad2      	subs	r2, r2, r3
 80009e4:	4613      	mov	r3, r2
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	4413      	add	r3, r2
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	1aca      	subs	r2, r1, r3
 80009ee:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <update_led_buffer_2+0x44>)
 80009f0:	605a      	str	r2, [r3, #4]
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	66666667 	.word	0x66666667
 8000a00:	20000088 	.word	0x20000088

08000a04 <isButtonPressed_1>:
int KeyReg3_1 = NORMAL_STATE;

int TimeOutForKeyPress_1 =  500;
int button1_flag = 0;

int isButtonPressed_1(){
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <isButtonPressed_1+0x20>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d104      	bne.n	8000a1a <isButtonPressed_1+0x16>
		button1_flag = 0;
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <isButtonPressed_1+0x20>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
		return 1;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e000      	b.n	8000a1c <isButtonPressed_1+0x18>
	}
	return 0;
 8000a1a:	2300      	movs	r3, #0
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	20000090 	.word	0x20000090

08000a28 <subKeyProcess_1>:

void subKeyProcess_1(){
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
	button1_flag = 1;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <subKeyProcess_1+0x14>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	601a      	str	r2, [r3, #0]
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000090 	.word	0x20000090

08000a40 <getKeyInput_1>:

void getKeyInput_1(){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	KeyReg0_1 = KeyReg1_1;
 8000a44:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <getKeyInput_1+0x94>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a23      	ldr	r2, [pc, #140]	; (8000ad8 <getKeyInput_1+0x98>)
 8000a4a:	6013      	str	r3, [r2, #0]
	KeyReg1_1 = KeyReg2_1;
 8000a4c:	4b23      	ldr	r3, [pc, #140]	; (8000adc <getKeyInput_1+0x9c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a20      	ldr	r2, [pc, #128]	; (8000ad4 <getKeyInput_1+0x94>)
 8000a52:	6013      	str	r3, [r2, #0]
	KeyReg2_1 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000a54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a58:	4821      	ldr	r0, [pc, #132]	; (8000ae0 <getKeyInput_1+0xa0>)
 8000a5a:	f001 fb8b 	bl	8002174 <HAL_GPIO_ReadPin>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <getKeyInput_1+0x9c>)
 8000a64:	601a      	str	r2, [r3, #0]

	if(KeyReg0_1 == KeyReg1_1 && KeyReg1_1 == KeyReg2_1)
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <getKeyInput_1+0x98>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <getKeyInput_1+0x94>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d12d      	bne.n	8000ace <getKeyInput_1+0x8e>
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <getKeyInput_1+0x94>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <getKeyInput_1+0x9c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d127      	bne.n	8000ace <getKeyInput_1+0x8e>
	{
		if(KeyReg3_1 != KeyReg2_1)
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <getKeyInput_1+0xa4>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	4b16      	ldr	r3, [pc, #88]	; (8000adc <getKeyInput_1+0x9c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d00e      	beq.n	8000aa8 <getKeyInput_1+0x68>
		{
			KeyReg3_1 = KeyReg2_1;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <getKeyInput_1+0x9c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <getKeyInput_1+0xa4>)
 8000a90:	6013      	str	r3, [r2, #0]
			if(KeyReg2_1 == PRESSED_STATE)
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <getKeyInput_1+0x9c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d119      	bne.n	8000ace <getKeyInput_1+0x8e>
			{
				subKeyProcess_1();
 8000a9a:	f7ff ffc5 	bl	8000a28 <subKeyProcess_1>
				TimeOutForKeyPress_1 =  500;
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <getKeyInput_1+0xa8>)
 8000aa0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000aa4:	601a      	str	r2, [r3, #0]
				}
				TimeOutForKeyPress_1 =  500;
			}
		}
	}
}
 8000aa6:	e012      	b.n	8000ace <getKeyInput_1+0x8e>
			TimeOutForKeyPress_1--;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <getKeyInput_1+0xa8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <getKeyInput_1+0xa8>)
 8000ab0:	6013      	str	r3, [r2, #0]
			if(TimeOutForKeyPress_1 == 0)
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <getKeyInput_1+0xa8>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d109      	bne.n	8000ace <getKeyInput_1+0x8e>
				if(KeyReg2_1 == PRESSED_STATE)
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <getKeyInput_1+0x9c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <getKeyInput_1+0x86>
					subKeyProcess_1();
 8000ac2:	f7ff ffb1 	bl	8000a28 <subKeyProcess_1>
				TimeOutForKeyPress_1 =  500;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <getKeyInput_1+0xa8>)
 8000ac8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000acc:	601a      	str	r2, [r3, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000004 	.word	0x20000004
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	40011000 	.word	0x40011000
 8000ae4:	2000000c 	.word	0x2000000c
 8000ae8:	20000010 	.word	0x20000010

08000aec <isButtonPressed_2>:
int KeyReg3_2 = NORMAL_STATE;

int TimeOutForKeyPress_2 =  500;
int button2_flag = 0;

int isButtonPressed_2(){
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <isButtonPressed_2+0x20>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d104      	bne.n	8000b02 <isButtonPressed_2+0x16>
		button2_flag = 0;
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <isButtonPressed_2+0x20>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
		return 1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e000      	b.n	8000b04 <isButtonPressed_2+0x18>
	}
	return 0;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	20000094 	.word	0x20000094

08000b10 <subKeyProcess_2>:

void subKeyProcess_2(){
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
	button2_flag = 1;
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <subKeyProcess_2+0x14>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	601a      	str	r2, [r3, #0]
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000094 	.word	0x20000094

08000b28 <getKeyInput_2>:

void getKeyInput_2(){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	KeyReg0_2 = KeyReg1_2;
 8000b2c:	4b23      	ldr	r3, [pc, #140]	; (8000bbc <getKeyInput_2+0x94>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a23      	ldr	r2, [pc, #140]	; (8000bc0 <getKeyInput_2+0x98>)
 8000b32:	6013      	str	r3, [r2, #0]
	KeyReg1_2 = KeyReg2_2;
 8000b34:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <getKeyInput_2+0x9c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a20      	ldr	r2, [pc, #128]	; (8000bbc <getKeyInput_2+0x94>)
 8000b3a:	6013      	str	r3, [r2, #0]
	KeyReg2_2 = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000b3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b40:	4821      	ldr	r0, [pc, #132]	; (8000bc8 <getKeyInput_2+0xa0>)
 8000b42:	f001 fb17 	bl	8002174 <HAL_GPIO_ReadPin>
 8000b46:	4603      	mov	r3, r0
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <getKeyInput_2+0x9c>)
 8000b4c:	601a      	str	r2, [r3, #0]

	if(KeyReg0_2 == KeyReg1_2 && KeyReg1_2 == KeyReg2_2)
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <getKeyInput_2+0x98>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <getKeyInput_2+0x94>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d12d      	bne.n	8000bb6 <getKeyInput_2+0x8e>
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <getKeyInput_2+0x94>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <getKeyInput_2+0x9c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d127      	bne.n	8000bb6 <getKeyInput_2+0x8e>
	{
		if(KeyReg3_2 != KeyReg2_2)
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <getKeyInput_2+0xa4>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <getKeyInput_2+0x9c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d00e      	beq.n	8000b90 <getKeyInput_2+0x68>
		{
			KeyReg3_2 = KeyReg2_2;
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <getKeyInput_2+0x9c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <getKeyInput_2+0xa4>)
 8000b78:	6013      	str	r3, [r2, #0]
			if(KeyReg2_2 == PRESSED_STATE)
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <getKeyInput_2+0x9c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d119      	bne.n	8000bb6 <getKeyInput_2+0x8e>
			{
				subKeyProcess_2();
 8000b82:	f7ff ffc5 	bl	8000b10 <subKeyProcess_2>
				TimeOutForKeyPress_2 =  500;
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <getKeyInput_2+0xa8>)
 8000b88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b8c:	601a      	str	r2, [r3, #0]
				}
				TimeOutForKeyPress_2 =  500;
			}
		}
	}
}
 8000b8e:	e012      	b.n	8000bb6 <getKeyInput_2+0x8e>
			TimeOutForKeyPress_2--;
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <getKeyInput_2+0xa8>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <getKeyInput_2+0xa8>)
 8000b98:	6013      	str	r3, [r2, #0]
			if(TimeOutForKeyPress_2 == 0)
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <getKeyInput_2+0xa8>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d109      	bne.n	8000bb6 <getKeyInput_2+0x8e>
				if(KeyReg2_2 == PRESSED_STATE)
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <getKeyInput_2+0x9c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d101      	bne.n	8000bae <getKeyInput_2+0x86>
					subKeyProcess_2();
 8000baa:	f7ff ffb1 	bl	8000b10 <subKeyProcess_2>
				TimeOutForKeyPress_2 =  500;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <getKeyInput_2+0xa8>)
 8000bb0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000bb4:	601a      	str	r2, [r3, #0]
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000018 	.word	0x20000018
 8000bc0:	20000014 	.word	0x20000014
 8000bc4:	2000001c 	.word	0x2000001c
 8000bc8:	40011000 	.word	0x40011000
 8000bcc:	20000020 	.word	0x20000020
 8000bd0:	20000024 	.word	0x20000024

08000bd4 <isButtonPressed_3>:
int KeyReg3_3 = NORMAL_STATE;

int TimeOutForKeyPress_3 =  500;
int button3_flag = 0;

int isButtonPressed_3(){
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <isButtonPressed_3+0x20>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d104      	bne.n	8000bea <isButtonPressed_3+0x16>
		button3_flag = 0;
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <isButtonPressed_3+0x20>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
		return 1;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e000      	b.n	8000bec <isButtonPressed_3+0x18>
	}
	return 0;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	20000098 	.word	0x20000098

08000bf8 <subKeyProcess_3>:

void subKeyProcess_3(){
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
	button3_flag = 1;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <subKeyProcess_3+0x14>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	601a      	str	r2, [r3, #0]
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000098 	.word	0x20000098

08000c10 <getKeyInput_3>:

void getKeyInput_3(){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	KeyReg0_3 = KeyReg1_3;
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <getKeyInput_3+0x94>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a23      	ldr	r2, [pc, #140]	; (8000ca8 <getKeyInput_3+0x98>)
 8000c1a:	6013      	str	r3, [r2, #0]
	KeyReg1_3 = KeyReg2_3;
 8000c1c:	4b23      	ldr	r3, [pc, #140]	; (8000cac <getKeyInput_3+0x9c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a20      	ldr	r2, [pc, #128]	; (8000ca4 <getKeyInput_3+0x94>)
 8000c22:	6013      	str	r3, [r2, #0]
	KeyReg2_3 = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000c24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c28:	4821      	ldr	r0, [pc, #132]	; (8000cb0 <getKeyInput_3+0xa0>)
 8000c2a:	f001 faa3 	bl	8002174 <HAL_GPIO_ReadPin>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <getKeyInput_3+0x9c>)
 8000c34:	601a      	str	r2, [r3, #0]

	if(KeyReg0_3 == KeyReg1_3 && KeyReg1_3 == KeyReg2_3)
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <getKeyInput_3+0x98>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <getKeyInput_3+0x94>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d12d      	bne.n	8000c9e <getKeyInput_3+0x8e>
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <getKeyInput_3+0x94>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <getKeyInput_3+0x9c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d127      	bne.n	8000c9e <getKeyInput_3+0x8e>
	{
		if(KeyReg3_3 != KeyReg2_3)
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <getKeyInput_3+0xa4>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <getKeyInput_3+0x9c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d00e      	beq.n	8000c78 <getKeyInput_3+0x68>
		{
			KeyReg3_3 = KeyReg2_3;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <getKeyInput_3+0x9c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a15      	ldr	r2, [pc, #84]	; (8000cb4 <getKeyInput_3+0xa4>)
 8000c60:	6013      	str	r3, [r2, #0]
			if(KeyReg2_3 == PRESSED_STATE)
 8000c62:	4b12      	ldr	r3, [pc, #72]	; (8000cac <getKeyInput_3+0x9c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d119      	bne.n	8000c9e <getKeyInput_3+0x8e>
			{
				subKeyProcess_3();
 8000c6a:	f7ff ffc5 	bl	8000bf8 <subKeyProcess_3>
				TimeOutForKeyPress_3 =  500;
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <getKeyInput_3+0xa8>)
 8000c70:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c74:	601a      	str	r2, [r3, #0]
				}
				TimeOutForKeyPress_3 =  500;
			}
		}
	}
}
 8000c76:	e012      	b.n	8000c9e <getKeyInput_3+0x8e>
			TimeOutForKeyPress_3--;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <getKeyInput_3+0xa8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <getKeyInput_3+0xa8>)
 8000c80:	6013      	str	r3, [r2, #0]
			if(TimeOutForKeyPress_3 == 0)
 8000c82:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <getKeyInput_3+0xa8>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d109      	bne.n	8000c9e <getKeyInput_3+0x8e>
				if(KeyReg2_3 == PRESSED_STATE)
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <getKeyInput_3+0x9c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d101      	bne.n	8000c96 <getKeyInput_3+0x86>
					subKeyProcess_3();
 8000c92:	f7ff ffb1 	bl	8000bf8 <subKeyProcess_3>
				TimeOutForKeyPress_3 =  500;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <getKeyInput_3+0xa8>)
 8000c98:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c9c:	601a      	str	r2, [r3, #0]
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	2000002c 	.word	0x2000002c
 8000ca8:	20000028 	.word	0x20000028
 8000cac:	20000030 	.word	0x20000030
 8000cb0:	40011000 	.word	0x40011000
 8000cb4:	20000034 	.word	0x20000034
 8000cb8:	20000038 	.word	0x20000038

08000cbc <blink_led_red>:
#include "led.h"

BLINK_LED_STATUS blink_led_red_status = BLINK_LED_INIT;

void blink_led_red()
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	switch(blink_led_red_status)
 8000cc0:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <blink_led_red+0x88>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d024      	beq.n	8000d12 <blink_led_red+0x56>
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	dc33      	bgt.n	8000d34 <blink_led_red+0x78>
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <blink_led_red+0x1a>
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d00d      	beq.n	8000cf0 <blink_led_red+0x34>
			blink_led_red_status = BLINK_LED_ON;
			setTimer1(1000);
		}
		break;
	default:
		break;
 8000cd4:	e02e      	b.n	8000d34 <blink_led_red+0x78>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2120      	movs	r1, #32
 8000cda:	481b      	ldr	r0, [pc, #108]	; (8000d48 <blink_led_red+0x8c>)
 8000cdc:	f001 fa61 	bl	80021a2 <HAL_GPIO_WritePin>
		blink_led_red_status = BLINK_LED_ON;
 8000ce0:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <blink_led_red+0x88>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
		setTimer1(1000);
 8000ce6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cea:	f000 fb33 	bl	8001354 <setTimer1>
		break;
 8000cee:	e026      	b.n	8000d3e <blink_led_red+0x82>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2120      	movs	r1, #32
 8000cf4:	4814      	ldr	r0, [pc, #80]	; (8000d48 <blink_led_red+0x8c>)
 8000cf6:	f001 fa54 	bl	80021a2 <HAL_GPIO_WritePin>
		if(timer1_flag == 1)
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <blink_led_red+0x90>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d11a      	bne.n	8000d38 <blink_led_red+0x7c>
			blink_led_red_status = BLINK_LED_OFF;
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <blink_led_red+0x88>)
 8000d04:	2202      	movs	r2, #2
 8000d06:	701a      	strb	r2, [r3, #0]
			setTimer1(1000);
 8000d08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d0c:	f000 fb22 	bl	8001354 <setTimer1>
		break;
 8000d10:	e012      	b.n	8000d38 <blink_led_red+0x7c>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000d12:	2201      	movs	r2, #1
 8000d14:	2120      	movs	r1, #32
 8000d16:	480c      	ldr	r0, [pc, #48]	; (8000d48 <blink_led_red+0x8c>)
 8000d18:	f001 fa43 	bl	80021a2 <HAL_GPIO_WritePin>
		if(timer1_flag == 1)
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <blink_led_red+0x90>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d10b      	bne.n	8000d3c <blink_led_red+0x80>
			blink_led_red_status = BLINK_LED_ON;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <blink_led_red+0x88>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
			setTimer1(1000);
 8000d2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d2e:	f000 fb11 	bl	8001354 <setTimer1>
		break;
 8000d32:	e003      	b.n	8000d3c <blink_led_red+0x80>
		break;
 8000d34:	bf00      	nop
 8000d36:	e002      	b.n	8000d3e <blink_led_red+0x82>
		break;
 8000d38:	bf00      	nop
 8000d3a:	e000      	b.n	8000d3e <blink_led_red+0x82>
		break;
 8000d3c:	bf00      	nop
	}
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000009c 	.word	0x2000009c
 8000d48:	40010800 	.word	0x40010800
 8000d4c:	200000ec 	.word	0x200000ec

08000d50 <blink_all_led_red>:

BLINK_LED_STATUS blink_all_led_red_status = BLINK_LED_INIT;
void blink_all_led_red()
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	switch(blink_all_led_red_status)
 8000d54:	4b4a      	ldr	r3, [pc, #296]	; (8000e80 <blink_all_led_red+0x130>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d05d      	beq.n	8000e18 <blink_all_led_red+0xc8>
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	f300 8088 	bgt.w	8000e72 <blink_all_led_red+0x122>
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d002      	beq.n	8000d6c <blink_all_led_red+0x1c>
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d029      	beq.n	8000dbe <blink_all_led_red+0x6e>
			blink_all_led_red_status = BLINK_LED_ON;
			setTimer5(ON_TIME);
		}
		break;
	default:
		break;
 8000d6a:	e082      	b.n	8000e72 <blink_all_led_red+0x122>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2140      	movs	r1, #64	; 0x40
 8000d70:	4844      	ldr	r0, [pc, #272]	; (8000e84 <blink_all_led_red+0x134>)
 8000d72:	f001 fa16 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 8000d76:	2201      	movs	r2, #1
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	4842      	ldr	r0, [pc, #264]	; (8000e84 <blink_all_led_red+0x134>)
 8000d7c:	f001 fa11 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d86:	483f      	ldr	r0, [pc, #252]	; (8000e84 <blink_all_led_red+0x134>)
 8000d88:	f001 fa0b 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d92:	483c      	ldr	r0, [pc, #240]	; (8000e84 <blink_all_led_red+0x134>)
 8000d94:	f001 fa05 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d9e:	4839      	ldr	r0, [pc, #228]	; (8000e84 <blink_all_led_red+0x134>)
 8000da0:	f001 f9ff 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000daa:	4836      	ldr	r0, [pc, #216]	; (8000e84 <blink_all_led_red+0x134>)
 8000dac:	f001 f9f9 	bl	80021a2 <HAL_GPIO_WritePin>
		blink_all_led_red_status = BLINK_LED_ON;
 8000db0:	4b33      	ldr	r3, [pc, #204]	; (8000e80 <blink_all_led_red+0x130>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
		setTimer5(ON_TIME);
 8000db6:	20fa      	movs	r0, #250	; 0xfa
 8000db8:	f000 fb3c 	bl	8001434 <setTimer5>
		break;
 8000dbc:	e05e      	b.n	8000e7c <blink_all_led_red+0x12c>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2140      	movs	r1, #64	; 0x40
 8000dc2:	4830      	ldr	r0, [pc, #192]	; (8000e84 <blink_all_led_red+0x134>)
 8000dc4:	f001 f9ed 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2180      	movs	r1, #128	; 0x80
 8000dcc:	482d      	ldr	r0, [pc, #180]	; (8000e84 <blink_all_led_red+0x134>)
 8000dce:	f001 f9e8 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd8:	482a      	ldr	r0, [pc, #168]	; (8000e84 <blink_all_led_red+0x134>)
 8000dda:	f001 f9e2 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de4:	4827      	ldr	r0, [pc, #156]	; (8000e84 <blink_all_led_red+0x134>)
 8000de6:	f001 f9dc 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df0:	4824      	ldr	r0, [pc, #144]	; (8000e84 <blink_all_led_red+0x134>)
 8000df2:	f001 f9d6 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dfc:	4821      	ldr	r0, [pc, #132]	; (8000e84 <blink_all_led_red+0x134>)
 8000dfe:	f001 f9d0 	bl	80021a2 <HAL_GPIO_WritePin>
		if(timer5_flag == 1)
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <blink_all_led_red+0x138>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d135      	bne.n	8000e76 <blink_all_led_red+0x126>
			blink_all_led_red_status = BLINK_LED_OFF;
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <blink_all_led_red+0x130>)
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	701a      	strb	r2, [r3, #0]
			setTimer5(ON_TIME);
 8000e10:	20fa      	movs	r0, #250	; 0xfa
 8000e12:	f000 fb0f 	bl	8001434 <setTimer5>
		break;
 8000e16:	e02e      	b.n	8000e76 <blink_all_led_red+0x126>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2140      	movs	r1, #64	; 0x40
 8000e1c:	4819      	ldr	r0, [pc, #100]	; (8000e84 <blink_all_led_red+0x134>)
 8000e1e:	f001 f9c0 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2180      	movs	r1, #128	; 0x80
 8000e26:	4817      	ldr	r0, [pc, #92]	; (8000e84 <blink_all_led_red+0x134>)
 8000e28:	f001 f9bb 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e32:	4814      	ldr	r0, [pc, #80]	; (8000e84 <blink_all_led_red+0x134>)
 8000e34:	f001 f9b5 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <blink_all_led_red+0x134>)
 8000e40:	f001 f9af 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4a:	480e      	ldr	r0, [pc, #56]	; (8000e84 <blink_all_led_red+0x134>)
 8000e4c:	f001 f9a9 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e56:	480b      	ldr	r0, [pc, #44]	; (8000e84 <blink_all_led_red+0x134>)
 8000e58:	f001 f9a3 	bl	80021a2 <HAL_GPIO_WritePin>
		if(timer5_flag == 1)
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <blink_all_led_red+0x138>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d10a      	bne.n	8000e7a <blink_all_led_red+0x12a>
			blink_all_led_red_status = BLINK_LED_ON;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <blink_all_led_red+0x130>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
			setTimer5(ON_TIME);
 8000e6a:	20fa      	movs	r0, #250	; 0xfa
 8000e6c:	f000 fae2 	bl	8001434 <setTimer5>
		break;
 8000e70:	e003      	b.n	8000e7a <blink_all_led_red+0x12a>
		break;
 8000e72:	bf00      	nop
 8000e74:	e002      	b.n	8000e7c <blink_all_led_red+0x12c>
		break;
 8000e76:	bf00      	nop
 8000e78:	e000      	b.n	8000e7c <blink_all_led_red+0x12c>
		break;
 8000e7a:	bf00      	nop
	}
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	2000009d 	.word	0x2000009d
 8000e84:	40010800 	.word	0x40010800
 8000e88:	2000010c 	.word	0x2000010c

08000e8c <blink_all_led_yellow>:

BLINK_LED_STATUS blink_all_led_yellow_status = BLINK_LED_INIT;
void blink_all_led_yellow()
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	switch(blink_all_led_yellow_status)
 8000e90:	4b4a      	ldr	r3, [pc, #296]	; (8000fbc <blink_all_led_yellow+0x130>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d05d      	beq.n	8000f54 <blink_all_led_yellow+0xc8>
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	f300 8088 	bgt.w	8000fae <blink_all_led_yellow+0x122>
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d002      	beq.n	8000ea8 <blink_all_led_yellow+0x1c>
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d029      	beq.n	8000efa <blink_all_led_yellow+0x6e>
			blink_all_led_yellow_status = BLINK_LED_ON;
			setTimer5(ON_TIME);
		}
		break;
	default:
		break;
 8000ea6:	e082      	b.n	8000fae <blink_all_led_yellow+0x122>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2140      	movs	r1, #64	; 0x40
 8000eac:	4844      	ldr	r0, [pc, #272]	; (8000fc0 <blink_all_led_yellow+0x134>)
 8000eae:	f001 f978 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2180      	movs	r1, #128	; 0x80
 8000eb6:	4842      	ldr	r0, [pc, #264]	; (8000fc0 <blink_all_led_yellow+0x134>)
 8000eb8:	f001 f973 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec2:	483f      	ldr	r0, [pc, #252]	; (8000fc0 <blink_all_led_yellow+0x134>)
 8000ec4:	f001 f96d 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ece:	483c      	ldr	r0, [pc, #240]	; (8000fc0 <blink_all_led_yellow+0x134>)
 8000ed0:	f001 f967 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eda:	4839      	ldr	r0, [pc, #228]	; (8000fc0 <blink_all_led_yellow+0x134>)
 8000edc:	f001 f961 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ee6:	4836      	ldr	r0, [pc, #216]	; (8000fc0 <blink_all_led_yellow+0x134>)
 8000ee8:	f001 f95b 	bl	80021a2 <HAL_GPIO_WritePin>
		blink_all_led_yellow_status = BLINK_LED_ON;
 8000eec:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <blink_all_led_yellow+0x130>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
		setTimer5(ON_TIME);
 8000ef2:	20fa      	movs	r0, #250	; 0xfa
 8000ef4:	f000 fa9e 	bl	8001434 <setTimer5>
		break;
 8000ef8:	e05e      	b.n	8000fb8 <blink_all_led_yellow+0x12c>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	2140      	movs	r1, #64	; 0x40
 8000efe:	4830      	ldr	r0, [pc, #192]	; (8000fc0 <blink_all_led_yellow+0x134>)
 8000f00:	f001 f94f 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2180      	movs	r1, #128	; 0x80
 8000f08:	482d      	ldr	r0, [pc, #180]	; (8000fc0 <blink_all_led_yellow+0x134>)
 8000f0a:	f001 f94a 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f14:	482a      	ldr	r0, [pc, #168]	; (8000fc0 <blink_all_led_yellow+0x134>)
 8000f16:	f001 f944 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f20:	4827      	ldr	r0, [pc, #156]	; (8000fc0 <blink_all_led_yellow+0x134>)
 8000f22:	f001 f93e 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2c:	4824      	ldr	r0, [pc, #144]	; (8000fc0 <blink_all_led_yellow+0x134>)
 8000f2e:	f001 f938 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f38:	4821      	ldr	r0, [pc, #132]	; (8000fc0 <blink_all_led_yellow+0x134>)
 8000f3a:	f001 f932 	bl	80021a2 <HAL_GPIO_WritePin>
		if(timer5_flag == 1)
 8000f3e:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <blink_all_led_yellow+0x138>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d135      	bne.n	8000fb2 <blink_all_led_yellow+0x126>
			blink_all_led_yellow_status = BLINK_LED_OFF;
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <blink_all_led_yellow+0x130>)
 8000f48:	2202      	movs	r2, #2
 8000f4a:	701a      	strb	r2, [r3, #0]
			setTimer5(ON_TIME);
 8000f4c:	20fa      	movs	r0, #250	; 0xfa
 8000f4e:	f000 fa71 	bl	8001434 <setTimer5>
		break;
 8000f52:	e02e      	b.n	8000fb2 <blink_all_led_yellow+0x126>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2140      	movs	r1, #64	; 0x40
 8000f58:	4819      	ldr	r0, [pc, #100]	; (8000fc0 <blink_all_led_yellow+0x134>)
 8000f5a:	f001 f922 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2180      	movs	r1, #128	; 0x80
 8000f62:	4817      	ldr	r0, [pc, #92]	; (8000fc0 <blink_all_led_yellow+0x134>)
 8000f64:	f001 f91d 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6e:	4814      	ldr	r0, [pc, #80]	; (8000fc0 <blink_all_led_yellow+0x134>)
 8000f70:	f001 f917 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7a:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <blink_all_led_yellow+0x134>)
 8000f7c:	f001 f911 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f86:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <blink_all_led_yellow+0x134>)
 8000f88:	f001 f90b 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f92:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <blink_all_led_yellow+0x134>)
 8000f94:	f001 f905 	bl	80021a2 <HAL_GPIO_WritePin>
		if(timer5_flag == 1)
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <blink_all_led_yellow+0x138>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d10a      	bne.n	8000fb6 <blink_all_led_yellow+0x12a>
			blink_all_led_yellow_status = BLINK_LED_ON;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <blink_all_led_yellow+0x130>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
			setTimer5(ON_TIME);
 8000fa6:	20fa      	movs	r0, #250	; 0xfa
 8000fa8:	f000 fa44 	bl	8001434 <setTimer5>
		break;
 8000fac:	e003      	b.n	8000fb6 <blink_all_led_yellow+0x12a>
		break;
 8000fae:	bf00      	nop
 8000fb0:	e002      	b.n	8000fb8 <blink_all_led_yellow+0x12c>
		break;
 8000fb2:	bf00      	nop
 8000fb4:	e000      	b.n	8000fb8 <blink_all_led_yellow+0x12c>
		break;
 8000fb6:	bf00      	nop
	}
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2000009e 	.word	0x2000009e
 8000fc0:	40010800 	.word	0x40010800
 8000fc4:	2000010c 	.word	0x2000010c

08000fc8 <blink_all_led_green>:

BLINK_LED_STATUS blink_all_led_green_status = BLINK_LED_INIT;
void blink_all_led_green()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	switch(blink_all_led_green_status)
 8000fcc:	4b4a      	ldr	r3, [pc, #296]	; (80010f8 <blink_all_led_green+0x130>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d05d      	beq.n	8001090 <blink_all_led_green+0xc8>
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	f300 8088 	bgt.w	80010ea <blink_all_led_green+0x122>
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <blink_all_led_green+0x1c>
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d029      	beq.n	8001036 <blink_all_led_green+0x6e>
			blink_all_led_green_status = BLINK_LED_ON;
			setTimer5(ON_TIME);
		}
		break;
	default:
		break;
 8000fe2:	e082      	b.n	80010ea <blink_all_led_green+0x122>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2140      	movs	r1, #64	; 0x40
 8000fe8:	4844      	ldr	r0, [pc, #272]	; (80010fc <blink_all_led_green+0x134>)
 8000fea:	f001 f8da 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2180      	movs	r1, #128	; 0x80
 8000ff2:	4842      	ldr	r0, [pc, #264]	; (80010fc <blink_all_led_green+0x134>)
 8000ff4:	f001 f8d5 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ffe:	483f      	ldr	r0, [pc, #252]	; (80010fc <blink_all_led_green+0x134>)
 8001000:	f001 f8cf 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100a:	483c      	ldr	r0, [pc, #240]	; (80010fc <blink_all_led_green+0x134>)
 800100c:	f001 f8c9 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001016:	4839      	ldr	r0, [pc, #228]	; (80010fc <blink_all_led_green+0x134>)
 8001018:	f001 f8c3 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001022:	4836      	ldr	r0, [pc, #216]	; (80010fc <blink_all_led_green+0x134>)
 8001024:	f001 f8bd 	bl	80021a2 <HAL_GPIO_WritePin>
		blink_all_led_green_status = BLINK_LED_ON;
 8001028:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <blink_all_led_green+0x130>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
		setTimer5(ON_TIME);
 800102e:	20fa      	movs	r0, #250	; 0xfa
 8001030:	f000 fa00 	bl	8001434 <setTimer5>
		break;
 8001034:	e05e      	b.n	80010f4 <blink_all_led_green+0x12c>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8001036:	2201      	movs	r2, #1
 8001038:	2140      	movs	r1, #64	; 0x40
 800103a:	4830      	ldr	r0, [pc, #192]	; (80010fc <blink_all_led_green+0x134>)
 800103c:	f001 f8b1 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	2180      	movs	r1, #128	; 0x80
 8001044:	482d      	ldr	r0, [pc, #180]	; (80010fc <blink_all_led_green+0x134>)
 8001046:	f001 f8ac 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001050:	482a      	ldr	r0, [pc, #168]	; (80010fc <blink_all_led_green+0x134>)
 8001052:	f001 f8a6 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	f44f 7100 	mov.w	r1, #512	; 0x200
 800105c:	4827      	ldr	r0, [pc, #156]	; (80010fc <blink_all_led_green+0x134>)
 800105e:	f001 f8a0 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001068:	4824      	ldr	r0, [pc, #144]	; (80010fc <blink_all_led_green+0x134>)
 800106a:	f001 f89a 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001074:	4821      	ldr	r0, [pc, #132]	; (80010fc <blink_all_led_green+0x134>)
 8001076:	f001 f894 	bl	80021a2 <HAL_GPIO_WritePin>
		if(timer5_flag == 1)
 800107a:	4b21      	ldr	r3, [pc, #132]	; (8001100 <blink_all_led_green+0x138>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d135      	bne.n	80010ee <blink_all_led_green+0x126>
			blink_all_led_green_status = BLINK_LED_OFF;
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <blink_all_led_green+0x130>)
 8001084:	2202      	movs	r2, #2
 8001086:	701a      	strb	r2, [r3, #0]
			setTimer5(ON_TIME);
 8001088:	20fa      	movs	r0, #250	; 0xfa
 800108a:	f000 f9d3 	bl	8001434 <setTimer5>
		break;
 800108e:	e02e      	b.n	80010ee <blink_all_led_green+0x126>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	2140      	movs	r1, #64	; 0x40
 8001094:	4819      	ldr	r0, [pc, #100]	; (80010fc <blink_all_led_green+0x134>)
 8001096:	f001 f884 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2180      	movs	r1, #128	; 0x80
 800109e:	4817      	ldr	r0, [pc, #92]	; (80010fc <blink_all_led_green+0x134>)
 80010a0:	f001 f87f 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010aa:	4814      	ldr	r0, [pc, #80]	; (80010fc <blink_all_led_green+0x134>)
 80010ac:	f001 f879 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b6:	4811      	ldr	r0, [pc, #68]	; (80010fc <blink_all_led_green+0x134>)
 80010b8:	f001 f873 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c2:	480e      	ldr	r0, [pc, #56]	; (80010fc <blink_all_led_green+0x134>)
 80010c4:	f001 f86d 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ce:	480b      	ldr	r0, [pc, #44]	; (80010fc <blink_all_led_green+0x134>)
 80010d0:	f001 f867 	bl	80021a2 <HAL_GPIO_WritePin>
		if(timer5_flag == 1)
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <blink_all_led_green+0x138>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d10a      	bne.n	80010f2 <blink_all_led_green+0x12a>
			blink_all_led_green_status = BLINK_LED_ON;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <blink_all_led_green+0x130>)
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
			setTimer5(ON_TIME);
 80010e2:	20fa      	movs	r0, #250	; 0xfa
 80010e4:	f000 f9a6 	bl	8001434 <setTimer5>
		break;
 80010e8:	e003      	b.n	80010f2 <blink_all_led_green+0x12a>
		break;
 80010ea:	bf00      	nop
 80010ec:	e002      	b.n	80010f4 <blink_all_led_green+0x12c>
		break;
 80010ee:	bf00      	nop
 80010f0:	e000      	b.n	80010f4 <blink_all_led_green+0x12c>
		break;
 80010f2:	bf00      	nop
	}
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	2000009f 	.word	0x2000009f
 80010fc:	40010800 	.word	0x40010800
 8001100:	2000010c 	.word	0x2000010c

08001104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001108:	f000 fd48 	bl	8001b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110c:	f000 f812 	bl	8001134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001110:	f000 f898 	bl	8001244 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001114:	f000 f84a 	bl	80011ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(& htim2); /*function to initialize the timer*/
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <main+0x2c>)
 800111a:	f001 fc89 	bl	8002a30 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer4(1000); /*Init software timer for traffic light run*/
 800111e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001122:	f000 f96b 	bl	80013fc <setTimer4>
  {
//	  if(isButtonPressed_2() == 1)
//	  {
//		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
//	  }
	  blink_led_red();
 8001126:	f7ff fdc9 	bl	8000cbc <blink_led_red>
//	  control_time();
	  main_system();
 800112a:	f000 fbd9 	bl	80018e0 <main_system>
	  blink_led_red();
 800112e:	e7fa      	b.n	8001126 <main+0x22>
 8001130:	200000a0 	.word	0x200000a0

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b090      	sub	sp, #64	; 0x40
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0318 	add.w	r3, r7, #24
 800113e:	2228      	movs	r2, #40	; 0x28
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f002 f830 	bl	80031a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001156:	2302      	movs	r3, #2
 8001158:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800115a:	2301      	movs	r3, #1
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800115e:	2310      	movs	r3, #16
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001162:	2300      	movs	r3, #0
 8001164:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001166:	f107 0318 	add.w	r3, r7, #24
 800116a:	4618      	mov	r0, r3
 800116c:	f001 f832 	bl	80021d4 <HAL_RCC_OscConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001176:	f000 f8e7 	bl	8001348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117a:	230f      	movs	r3, #15
 800117c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f001 faa0 	bl	80026d8 <HAL_RCC_ClockConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800119e:	f000 f8d3 	bl	8001348 <Error_Handler>
  }
}
 80011a2:	bf00      	nop
 80011a4:	3740      	adds	r7, #64	; 0x40
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011c8:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <MX_TIM2_Init+0x94>)
 80011ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <MX_TIM2_Init+0x94>)
 80011d2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80011d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <MX_TIM2_Init+0x94>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <MX_TIM2_Init+0x94>)
 80011e0:	2209      	movs	r2, #9
 80011e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <MX_TIM2_Init+0x94>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <MX_TIM2_Init+0x94>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011f0:	4813      	ldr	r0, [pc, #76]	; (8001240 <MX_TIM2_Init+0x94>)
 80011f2:	f001 fbcd 	bl	8002990 <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011fc:	f000 f8a4 	bl	8001348 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001204:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	4619      	mov	r1, r3
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <MX_TIM2_Init+0x94>)
 800120e:	f001 fd63 	bl	8002cd8 <HAL_TIM_ConfigClockSource>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001218:	f000 f896 	bl	8001348 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_TIM2_Init+0x94>)
 800122a:	f001 ff2f 	bl	800308c <HAL_TIMEx_MasterConfigSynchronization>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001234:	f000 f888 	bl	8001348 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200000a0 	.word	0x200000a0

08001244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001258:	4b2f      	ldr	r3, [pc, #188]	; (8001318 <MX_GPIO_Init+0xd4>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a2e      	ldr	r2, [pc, #184]	; (8001318 <MX_GPIO_Init+0xd4>)
 800125e:	f043 0310 	orr.w	r3, r3, #16
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <MX_GPIO_Init+0xd4>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0310 	and.w	r3, r3, #16
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b29      	ldr	r3, [pc, #164]	; (8001318 <MX_GPIO_Init+0xd4>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a28      	ldr	r2, [pc, #160]	; (8001318 <MX_GPIO_Init+0xd4>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b26      	ldr	r3, [pc, #152]	; (8001318 <MX_GPIO_Init+0xd4>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <MX_GPIO_Init+0xd4>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a22      	ldr	r2, [pc, #136]	; (8001318 <MX_GPIO_Init+0xd4>)
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b20      	ldr	r3, [pc, #128]	; (8001318 <MX_GPIO_Init+0xd4>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_0_Pin|EN_1_Pin|EN_2_Pin|EN_3_Pin
 80012a0:	2200      	movs	r2, #0
 80012a2:	f640 71fe 	movw	r1, #4094	; 0xffe
 80012a6:	481d      	ldr	r0, [pc, #116]	; (800131c <MX_GPIO_Init+0xd8>)
 80012a8:	f000 ff7b 	bl	80021a2 <HAL_GPIO_WritePin>
                          |LED_RED_Pin|LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin
                          |LED_RED_2_Pin|LED_YELLOW_2_Pin|LED_GREEN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_0_1_Pin|SEG_1_1_Pin|SEG_2_1_Pin|SEG_3_2_Pin
 80012ac:	2200      	movs	r2, #0
 80012ae:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80012b2:	481b      	ldr	r0, [pc, #108]	; (8001320 <MX_GPIO_Init+0xdc>)
 80012b4:	f000 ff75 	bl	80021a2 <HAL_GPIO_WritePin>
                          |SEG_4_2_Pin|SEG_5_2_Pin|SEG_6_2_Pin|SEG_3_1_Pin
                          |SEG_4_1_Pin|SEG_5_1_Pin|SEG_6_1_Pin|SEG_0_2_Pin
                          |SEG_1_2_Pin|SEG_2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 80012b8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80012bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c6:	f107 0310 	add.w	r3, r7, #16
 80012ca:	4619      	mov	r1, r3
 80012cc:	4815      	ldr	r0, [pc, #84]	; (8001324 <MX_GPIO_Init+0xe0>)
 80012ce:	f000 fdd5 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_0_Pin EN_1_Pin EN_2_Pin EN_3_Pin
                           LED_RED_Pin LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin
                           LED_RED_2_Pin LED_YELLOW_2_Pin LED_GREEN_2_Pin */
  GPIO_InitStruct.Pin = EN_0_Pin|EN_1_Pin|EN_2_Pin|EN_3_Pin
 80012d2:	f640 73fe 	movw	r3, #4094	; 0xffe
 80012d6:	613b      	str	r3, [r7, #16]
                          |LED_RED_Pin|LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin
                          |LED_RED_2_Pin|LED_YELLOW_2_Pin|LED_GREEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2302      	movs	r3, #2
 80012e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	480c      	ldr	r0, [pc, #48]	; (800131c <MX_GPIO_Init+0xd8>)
 80012ec:	f000 fdc6 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_0_1_Pin SEG_1_1_Pin SEG_2_1_Pin SEG_3_2_Pin
                           SEG_4_2_Pin SEG_5_2_Pin SEG_6_2_Pin SEG_3_1_Pin
                           SEG_4_1_Pin SEG_5_1_Pin SEG_6_1_Pin SEG_0_2_Pin
                           SEG_1_2_Pin SEG_2_2_Pin */
  GPIO_InitStruct.Pin = SEG_0_1_Pin|SEG_1_1_Pin|SEG_2_1_Pin|SEG_3_2_Pin
 80012f0:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80012f4:	613b      	str	r3, [r7, #16]
                          |SEG_4_2_Pin|SEG_5_2_Pin|SEG_6_2_Pin|SEG_3_1_Pin
                          |SEG_4_1_Pin|SEG_5_1_Pin|SEG_6_1_Pin|SEG_0_2_Pin
                          |SEG_1_2_Pin|SEG_2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2302      	movs	r3, #2
 8001300:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001302:	f107 0310 	add.w	r3, r7, #16
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_GPIO_Init+0xdc>)
 800130a:	f000 fdb7 	bl	8001e7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800130e:	bf00      	nop
 8001310:	3720      	adds	r7, #32
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	40010800 	.word	0x40010800
 8001320:	40010c00 	.word	0x40010c00
 8001324:	40011000 	.word	0x40011000

08001328 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001330:	f000 f89c 	bl	800146c <timerRun>
	getKeyInput_1();
 8001334:	f7ff fb84 	bl	8000a40 <getKeyInput_1>
	getKeyInput_2();
 8001338:	f7ff fbf6 	bl	8000b28 <getKeyInput_2>
	getKeyInput_3();
 800133c:	f7ff fc68 	bl	8000c10 <getKeyInput_3>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134c:	b672      	cpsid	i
}
 800134e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001350:	e7fe      	b.n	8001350 <Error_Handler+0x8>
	...

08001354 <setTimer1>:

int timer1_counter = 0;
int timer1_flag = 0;

void setTimer1(int duration)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a08      	ldr	r2, [pc, #32]	; (8001380 <setTimer1+0x2c>)
 8001360:	fb82 1203 	smull	r1, r2, r2, r3
 8001364:	1092      	asrs	r2, r2, #2
 8001366:	17db      	asrs	r3, r3, #31
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	4a06      	ldr	r2, [pc, #24]	; (8001384 <setTimer1+0x30>)
 800136c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <setTimer1+0x34>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	66666667 	.word	0x66666667
 8001384:	200000e8 	.word	0x200000e8
 8001388:	200000ec 	.word	0x200000ec

0800138c <setTimer2>:

int timer2_counter = 0;
int timer2_flag = 0;

void setTimer2(int duration)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <setTimer2+0x2c>)
 8001398:	fb82 1203 	smull	r1, r2, r2, r3
 800139c:	1092      	asrs	r2, r2, #2
 800139e:	17db      	asrs	r3, r3, #31
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	4a06      	ldr	r2, [pc, #24]	; (80013bc <setTimer2+0x30>)
 80013a4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <setTimer2+0x34>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	66666667 	.word	0x66666667
 80013bc:	200000f0 	.word	0x200000f0
 80013c0:	200000f4 	.word	0x200000f4

080013c4 <setTimer3>:

int timer3_counter = 0;
int timer3_flag = 0;

void setTimer3(int duration)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <setTimer3+0x2c>)
 80013d0:	fb82 1203 	smull	r1, r2, r2, r3
 80013d4:	1092      	asrs	r2, r2, #2
 80013d6:	17db      	asrs	r3, r3, #31
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <setTimer3+0x30>)
 80013dc:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <setTimer3+0x34>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	66666667 	.word	0x66666667
 80013f4:	200000f8 	.word	0x200000f8
 80013f8:	200000fc 	.word	0x200000fc

080013fc <setTimer4>:

int timer4_counter = 0;
int timer4_flag = 0;

void setTimer4(int duration)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a08      	ldr	r2, [pc, #32]	; (8001428 <setTimer4+0x2c>)
 8001408:	fb82 1203 	smull	r1, r2, r2, r3
 800140c:	1092      	asrs	r2, r2, #2
 800140e:	17db      	asrs	r3, r3, #31
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	4a06      	ldr	r2, [pc, #24]	; (800142c <setTimer4+0x30>)
 8001414:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <setTimer4+0x34>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	66666667 	.word	0x66666667
 800142c:	20000100 	.word	0x20000100
 8001430:	20000104 	.word	0x20000104

08001434 <setTimer5>:

int timer5_counter = 0;
int timer5_flag = 0;

void setTimer5(int duration)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a08      	ldr	r2, [pc, #32]	; (8001460 <setTimer5+0x2c>)
 8001440:	fb82 1203 	smull	r1, r2, r2, r3
 8001444:	1092      	asrs	r2, r2, #2
 8001446:	17db      	asrs	r3, r3, #31
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	4a06      	ldr	r2, [pc, #24]	; (8001464 <setTimer5+0x30>)
 800144c:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <setTimer5+0x34>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	66666667 	.word	0x66666667
 8001464:	20000108 	.word	0x20000108
 8001468:	2000010c 	.word	0x2000010c

0800146c <timerRun>:

void timerRun(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0)
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <timerRun+0xac>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	dd0b      	ble.n	8001490 <timerRun+0x24>
	{
		timer1_counter--;
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <timerRun+0xac>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3b01      	subs	r3, #1
 800147e:	4a26      	ldr	r2, [pc, #152]	; (8001518 <timerRun+0xac>)
 8001480:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0)
 8001482:	4b25      	ldr	r3, [pc, #148]	; (8001518 <timerRun+0xac>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	dc02      	bgt.n	8001490 <timerRun+0x24>
		{
			timer1_flag = 1;
 800148a:	4b24      	ldr	r3, [pc, #144]	; (800151c <timerRun+0xb0>)
 800148c:	2201      	movs	r2, #1
 800148e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0)
 8001490:	4b23      	ldr	r3, [pc, #140]	; (8001520 <timerRun+0xb4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	dd0b      	ble.n	80014b0 <timerRun+0x44>
	{
		timer2_counter--;
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <timerRun+0xb4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3b01      	subs	r3, #1
 800149e:	4a20      	ldr	r2, [pc, #128]	; (8001520 <timerRun+0xb4>)
 80014a0:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0)
 80014a2:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <timerRun+0xb4>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	dc02      	bgt.n	80014b0 <timerRun+0x44>
		{
			timer2_flag = 1;
 80014aa:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <timerRun+0xb8>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0)
 80014b0:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <timerRun+0xbc>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	dd0b      	ble.n	80014d0 <timerRun+0x64>
	{
		timer3_counter--;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <timerRun+0xbc>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3b01      	subs	r3, #1
 80014be:	4a1a      	ldr	r2, [pc, #104]	; (8001528 <timerRun+0xbc>)
 80014c0:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0)
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <timerRun+0xbc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	dc02      	bgt.n	80014d0 <timerRun+0x64>
		{
			timer3_flag = 1;
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <timerRun+0xc0>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0)
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <timerRun+0xc4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	dd0b      	ble.n	80014f0 <timerRun+0x84>
	{
		timer4_counter--;
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <timerRun+0xc4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3b01      	subs	r3, #1
 80014de:	4a14      	ldr	r2, [pc, #80]	; (8001530 <timerRun+0xc4>)
 80014e0:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0)
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <timerRun+0xc4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	dc02      	bgt.n	80014f0 <timerRun+0x84>
		{
			timer4_flag = 1;
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <timerRun+0xc8>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0)
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <timerRun+0xcc>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	dd0b      	ble.n	8001510 <timerRun+0xa4>
	{
		timer5_counter--;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <timerRun+0xcc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <timerRun+0xcc>)
 8001500:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0)
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <timerRun+0xcc>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	dc02      	bgt.n	8001510 <timerRun+0xa4>
		{
			timer5_flag = 1;
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <timerRun+0xd0>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	200000e8 	.word	0x200000e8
 800151c:	200000ec 	.word	0x200000ec
 8001520:	200000f0 	.word	0x200000f0
 8001524:	200000f4 	.word	0x200000f4
 8001528:	200000f8 	.word	0x200000f8
 800152c:	200000fc 	.word	0x200000fc
 8001530:	20000100 	.word	0x20000100
 8001534:	20000104 	.word	0x20000104
 8001538:	20000108 	.word	0x20000108
 800153c:	2000010c 	.word	0x2000010c

08001540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <HAL_MspInit+0x40>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	4a0d      	ldr	r2, [pc, #52]	; (8001580 <HAL_MspInit+0x40>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6193      	str	r3, [r2, #24]
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <HAL_MspInit+0x40>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_MspInit+0x40>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4a07      	ldr	r2, [pc, #28]	; (8001580 <HAL_MspInit+0x40>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001568:	61d3      	str	r3, [r2, #28]
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_MspInit+0x40>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	40021000 	.word	0x40021000

08001584 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001594:	d113      	bne.n	80015be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <HAL_TIM_Base_MspInit+0x44>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <HAL_TIM_Base_MspInit+0x44>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	61d3      	str	r3, [r2, #28]
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_TIM_Base_MspInit+0x44>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	201c      	movs	r0, #28
 80015b4:	f000 fc2b 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015b8:	201c      	movs	r0, #28
 80015ba:	f000 fc44 	bl	8001e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <NMI_Handler+0x4>

080015d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <HardFault_Handler+0x4>

080015d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <MemManage_Handler+0x4>

080015de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <BusFault_Handler+0x4>

080015e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <UsageFault_Handler+0x4>

080015ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr

080015f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr

08001602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr

0800160e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001612:	f000 fb09 	bl	8001c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <TIM2_IRQHandler+0x10>)
 8001622:	f001 fa51 	bl	8002ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200000a0 	.word	0x200000a0

08001630 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <traffic_light_run>:
int traffic2_counter = 0;

TRAFFIC_LIGHT_STATUS traffic_light_status = TRAFFIC_LIGHT_INIT;

void traffic_light_run()
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	switch(traffic_light_status)
 8001640:	4b89      	ldr	r3, [pc, #548]	; (8001868 <traffic_light_run+0x22c>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b04      	cmp	r3, #4
 8001646:	f200 8104 	bhi.w	8001852 <traffic_light_run+0x216>
 800164a:	a201      	add	r2, pc, #4	; (adr r2, 8001650 <traffic_light_run+0x14>)
 800164c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001650:	08001665 	.word	0x08001665
 8001654:	080016c1 	.word	0x080016c1
 8001658:	0800171f 	.word	0x0800171f
 800165c:	0800178b 	.word	0x0800178b
 8001660:	080017e7 	.word	0x080017e7
	{
	case TRAFFIC_LIGHT_INIT:
		/*Turn off all leds*/
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 8001664:	2201      	movs	r2, #1
 8001666:	2140      	movs	r1, #64	; 0x40
 8001668:	4880      	ldr	r0, [pc, #512]	; (800186c <traffic_light_run+0x230>)
 800166a:	f000 fd9a 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	2180      	movs	r1, #128	; 0x80
 8001672:	487e      	ldr	r0, [pc, #504]	; (800186c <traffic_light_run+0x230>)
 8001674:	f000 fd95 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167e:	487b      	ldr	r0, [pc, #492]	; (800186c <traffic_light_run+0x230>)
 8001680:	f000 fd8f 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8001684:	2201      	movs	r2, #1
 8001686:	f44f 7100 	mov.w	r1, #512	; 0x200
 800168a:	4878      	ldr	r0, [pc, #480]	; (800186c <traffic_light_run+0x230>)
 800168c:	f000 fd89 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 8001690:	2201      	movs	r2, #1
 8001692:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001696:	4875      	ldr	r0, [pc, #468]	; (800186c <traffic_light_run+0x230>)
 8001698:	f000 fd83 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a2:	4872      	ldr	r0, [pc, #456]	; (800186c <traffic_light_run+0x230>)
 80016a4:	f000 fd7d 	bl	80021a2 <HAL_GPIO_WritePin>

		traffic_light_status = GREEN1_RED2;
 80016a8:	4b6f      	ldr	r3, [pc, #444]	; (8001868 <traffic_light_run+0x22c>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]

		traffic1_counter = led_green_duration;
 80016ae:	4b70      	ldr	r3, [pc, #448]	; (8001870 <traffic_light_run+0x234>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a70      	ldr	r2, [pc, #448]	; (8001874 <traffic_light_run+0x238>)
 80016b4:	6013      	str	r3, [r2, #0]
		traffic2_counter = led_red_duration;
 80016b6:	4b70      	ldr	r3, [pc, #448]	; (8001878 <traffic_light_run+0x23c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a70      	ldr	r2, [pc, #448]	; (800187c <traffic_light_run+0x240>)
 80016bc:	6013      	str	r3, [r2, #0]
		break;
 80016be:	e0d1      	b.n	8001864 <traffic_light_run+0x228>
	case GREEN1_RED2:
		/*Turn on led green 1, turn on led red 2*/
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2140      	movs	r1, #64	; 0x40
 80016c4:	4869      	ldr	r0, [pc, #420]	; (800186c <traffic_light_run+0x230>)
 80016c6:	f000 fd6c 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 80016ca:	2201      	movs	r2, #1
 80016cc:	2180      	movs	r1, #128	; 0x80
 80016ce:	4867      	ldr	r0, [pc, #412]	; (800186c <traffic_light_run+0x230>)
 80016d0:	f000 fd67 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016da:	4864      	ldr	r0, [pc, #400]	; (800186c <traffic_light_run+0x230>)
 80016dc:	f000 fd61 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e6:	4861      	ldr	r0, [pc, #388]	; (800186c <traffic_light_run+0x230>)
 80016e8:	f000 fd5b 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 80016ec:	2201      	movs	r2, #1
 80016ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016f2:	485e      	ldr	r0, [pc, #376]	; (800186c <traffic_light_run+0x230>)
 80016f4:	f000 fd55 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 80016f8:	2201      	movs	r2, #1
 80016fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016fe:	485b      	ldr	r0, [pc, #364]	; (800186c <traffic_light_run+0x230>)
 8001700:	f000 fd4f 	bl	80021a2 <HAL_GPIO_WritePin>
		if(traffic1_counter <= 0)
 8001704:	4b5b      	ldr	r3, [pc, #364]	; (8001874 <traffic_light_run+0x238>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	f300 80a4 	bgt.w	8001856 <traffic_light_run+0x21a>
		{
			traffic_light_status = YELLOW1_RED2;
 800170e:	4b56      	ldr	r3, [pc, #344]	; (8001868 <traffic_light_run+0x22c>)
 8001710:	2202      	movs	r2, #2
 8001712:	701a      	strb	r2, [r3, #0]
			traffic1_counter = led_yellow_duration;
 8001714:	4b5a      	ldr	r3, [pc, #360]	; (8001880 <traffic_light_run+0x244>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a56      	ldr	r2, [pc, #344]	; (8001874 <traffic_light_run+0x238>)
 800171a:	6013      	str	r3, [r2, #0]
		}
		break;
 800171c:	e09b      	b.n	8001856 <traffic_light_run+0x21a>
	case YELLOW1_RED2:
		/*Turn on led yellow 1 and led red 2*/
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_SET);
 800171e:	2201      	movs	r2, #1
 8001720:	2140      	movs	r1, #64	; 0x40
 8001722:	4852      	ldr	r0, [pc, #328]	; (800186c <traffic_light_run+0x230>)
 8001724:	f000 fd3d 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	484f      	ldr	r0, [pc, #316]	; (800186c <traffic_light_run+0x230>)
 800172e:	f000 fd38 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 8001732:	2201      	movs	r2, #1
 8001734:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001738:	484c      	ldr	r0, [pc, #304]	; (800186c <traffic_light_run+0x230>)
 800173a:	f000 fd32 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001744:	4849      	ldr	r0, [pc, #292]	; (800186c <traffic_light_run+0x230>)
 8001746:	f000 fd2c 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001750:	4846      	ldr	r0, [pc, #280]	; (800186c <traffic_light_run+0x230>)
 8001752:	f000 fd26 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 8001756:	2201      	movs	r2, #1
 8001758:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800175c:	4843      	ldr	r0, [pc, #268]	; (800186c <traffic_light_run+0x230>)
 800175e:	f000 fd20 	bl	80021a2 <HAL_GPIO_WritePin>
		if(traffic1_counter <= 0 && traffic2_counter <= 0)
 8001762:	4b44      	ldr	r3, [pc, #272]	; (8001874 <traffic_light_run+0x238>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	dc77      	bgt.n	800185a <traffic_light_run+0x21e>
 800176a:	4b44      	ldr	r3, [pc, #272]	; (800187c <traffic_light_run+0x240>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	dc73      	bgt.n	800185a <traffic_light_run+0x21e>
		{
			traffic_light_status = GREEN2_RED1;
 8001772:	4b3d      	ldr	r3, [pc, #244]	; (8001868 <traffic_light_run+0x22c>)
 8001774:	2203      	movs	r2, #3
 8001776:	701a      	strb	r2, [r3, #0]
			traffic1_counter = led_red_duration;
 8001778:	4b3f      	ldr	r3, [pc, #252]	; (8001878 <traffic_light_run+0x23c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a3d      	ldr	r2, [pc, #244]	; (8001874 <traffic_light_run+0x238>)
 800177e:	6013      	str	r3, [r2, #0]
			traffic2_counter = led_green_duration;
 8001780:	4b3b      	ldr	r3, [pc, #236]	; (8001870 <traffic_light_run+0x234>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a3d      	ldr	r2, [pc, #244]	; (800187c <traffic_light_run+0x240>)
 8001786:	6013      	str	r3, [r2, #0]
		}
		break;
 8001788:	e067      	b.n	800185a <traffic_light_run+0x21e>
	case GREEN2_RED1:
		/*Turn on led green 2 and led red 1*/
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	2140      	movs	r1, #64	; 0x40
 800178e:	4837      	ldr	r0, [pc, #220]	; (800186c <traffic_light_run+0x230>)
 8001790:	f000 fd07 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 8001794:	2201      	movs	r2, #1
 8001796:	2180      	movs	r1, #128	; 0x80
 8001798:	4834      	ldr	r0, [pc, #208]	; (800186c <traffic_light_run+0x230>)
 800179a:	f000 fd02 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 800179e:	2201      	movs	r2, #1
 80017a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a4:	4831      	ldr	r0, [pc, #196]	; (800186c <traffic_light_run+0x230>)
 80017a6:	f000 fcfc 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 80017aa:	2201      	movs	r2, #1
 80017ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b0:	482e      	ldr	r0, [pc, #184]	; (800186c <traffic_light_run+0x230>)
 80017b2:	f000 fcf6 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_SET);
 80017b6:	2201      	movs	r2, #1
 80017b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017bc:	482b      	ldr	r0, [pc, #172]	; (800186c <traffic_light_run+0x230>)
 80017be:	f000 fcf0 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017c8:	4828      	ldr	r0, [pc, #160]	; (800186c <traffic_light_run+0x230>)
 80017ca:	f000 fcea 	bl	80021a2 <HAL_GPIO_WritePin>
		if(traffic2_counter <= 0)
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <traffic_light_run+0x240>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	dc43      	bgt.n	800185e <traffic_light_run+0x222>
		{
			traffic_light_status = YELLOW2_RED1;
 80017d6:	4b24      	ldr	r3, [pc, #144]	; (8001868 <traffic_light_run+0x22c>)
 80017d8:	2204      	movs	r2, #4
 80017da:	701a      	strb	r2, [r3, #0]
			traffic2_counter = led_yellow_duration;
 80017dc:	4b28      	ldr	r3, [pc, #160]	; (8001880 <traffic_light_run+0x244>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a26      	ldr	r2, [pc, #152]	; (800187c <traffic_light_run+0x240>)
 80017e2:	6013      	str	r3, [r2, #0]
		}
		break;
 80017e4:	e03b      	b.n	800185e <traffic_light_run+0x222>
	case YELLOW2_RED1:
		/*Turn on led yellow 2 and led red 1*/
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2140      	movs	r1, #64	; 0x40
 80017ea:	4820      	ldr	r0, [pc, #128]	; (800186c <traffic_light_run+0x230>)
 80017ec:	f000 fcd9 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, GPIO_PIN_SET);
 80017f0:	2201      	movs	r2, #1
 80017f2:	2180      	movs	r1, #128	; 0x80
 80017f4:	481d      	ldr	r0, [pc, #116]	; (800186c <traffic_light_run+0x230>)
 80017f6:	f000 fcd4 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, GPIO_PIN_SET);
 80017fa:	2201      	movs	r2, #1
 80017fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001800:	481a      	ldr	r0, [pc, #104]	; (800186c <traffic_light_run+0x230>)
 8001802:	f000 fcce 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, GPIO_PIN_SET);
 8001806:	2201      	movs	r2, #1
 8001808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800180c:	4817      	ldr	r0, [pc, #92]	; (800186c <traffic_light_run+0x230>)
 800180e:	f000 fcc8 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001818:	4814      	ldr	r0, [pc, #80]	; (800186c <traffic_light_run+0x230>)
 800181a:	f000 fcc2 	bl	80021a2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, GPIO_PIN_SET);
 800181e:	2201      	movs	r2, #1
 8001820:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001824:	4811      	ldr	r0, [pc, #68]	; (800186c <traffic_light_run+0x230>)
 8001826:	f000 fcbc 	bl	80021a2 <HAL_GPIO_WritePin>
		if(traffic1_counter <= 0 && traffic2_counter <= 0)
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <traffic_light_run+0x238>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	dc17      	bgt.n	8001862 <traffic_light_run+0x226>
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <traffic_light_run+0x240>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	dc13      	bgt.n	8001862 <traffic_light_run+0x226>
		{
			traffic_light_status = GREEN1_RED2;
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <traffic_light_run+0x22c>)
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
			traffic1_counter = led_green_duration;
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <traffic_light_run+0x234>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <traffic_light_run+0x238>)
 8001846:	6013      	str	r3, [r2, #0]
			traffic2_counter = led_red_duration;
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <traffic_light_run+0x23c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0b      	ldr	r2, [pc, #44]	; (800187c <traffic_light_run+0x240>)
 800184e:	6013      	str	r3, [r2, #0]
		}
		break;
 8001850:	e007      	b.n	8001862 <traffic_light_run+0x226>
	default:
		break;
 8001852:	bf00      	nop
 8001854:	e006      	b.n	8001864 <traffic_light_run+0x228>
		break;
 8001856:	bf00      	nop
 8001858:	e004      	b.n	8001864 <traffic_light_run+0x228>
		break;
 800185a:	bf00      	nop
 800185c:	e002      	b.n	8001864 <traffic_light_run+0x228>
		break;
 800185e:	bf00      	nop
 8001860:	e000      	b.n	8001864 <traffic_light_run+0x228>
		break;
 8001862:	bf00      	nop
	}
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000118 	.word	0x20000118
 800186c:	40010800 	.word	0x40010800
 8001870:	20000048 	.word	0x20000048
 8001874:	20000110 	.word	0x20000110
 8001878:	20000040 	.word	0x20000040
 800187c:	20000114 	.word	0x20000114
 8001880:	20000044 	.word	0x20000044

08001884 <control_time>:

void control_time()
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	if(timer4_flag == 1)
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <control_time+0x50>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d11f      	bne.n	80018d0 <control_time+0x4c>
	{
		if(traffic1_counter > 0 && traffic2_counter > 0)
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <control_time+0x54>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	dd17      	ble.n	80018c8 <control_time+0x44>
 8001898:	4b10      	ldr	r3, [pc, #64]	; (80018dc <control_time+0x58>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	dd13      	ble.n	80018c8 <control_time+0x44>
		{
//			traffic1_counter--;
//			traffic2_counter--;
			update_led_buffer_1(--traffic1_counter);
 80018a0:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <control_time+0x54>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	4a0c      	ldr	r2, [pc, #48]	; (80018d8 <control_time+0x54>)
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <control_time+0x54>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff f860 	bl	8000974 <update_led_buffer_1>
			update_led_buffer_2(--traffic2_counter);
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <control_time+0x58>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <control_time+0x58>)
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <control_time+0x58>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff f87a 	bl	80009bc <update_led_buffer_2>
		}
		setTimer4(1000);
 80018c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018cc:	f7ff fd96 	bl	80013fc <setTimer4>
	}
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000104 	.word	0x20000104
 80018d8:	20000110 	.word	0x20000110
 80018dc:	20000114 	.word	0x20000114

080018e0 <main_system>:

SYSTEM_MODE system_mode = MODE_INIT;

void main_system()
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	switch(system_mode)
 80018e4:	4b3b      	ldr	r3, [pc, #236]	; (80019d4 <main_system+0xf4>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d867      	bhi.n	80019bc <main_system+0xdc>
 80018ec:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <main_system+0x14>)
 80018ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f2:	bf00      	nop
 80018f4:	08001909 	.word	0x08001909
 80018f8:	08001911 	.word	0x08001911
 80018fc:	08001933 	.word	0x08001933
 8001900:	0800195f 	.word	0x0800195f
 8001904:	0800198b 	.word	0x0800198b
	{
	case MODE_INIT:
		system_mode = MODE_1;
 8001908:	4b32      	ldr	r3, [pc, #200]	; (80019d4 <main_system+0xf4>)
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
		break;
 800190e:	e05e      	b.n	80019ce <main_system+0xee>
	case MODE_1:
		/*The traffic light run normally*/
		traffic_light_run();
 8001910:	f7ff fe94 	bl	800163c <traffic_light_run>
		control_time();
 8001914:	f7ff ffb6 	bl	8001884 <control_time>
		scan_led_1();
 8001918:	f7fe ff64 	bl	80007e4 <scan_led_1>
		scan_led_2();
 800191c:	f7fe ffc6 	bl	80008ac <scan_led_2>
		if(isButtonPressed_1() == 1)
 8001920:	f7ff f870 	bl	8000a04 <isButtonPressed_1>
 8001924:	4603      	mov	r3, r0
 8001926:	2b01      	cmp	r3, #1
 8001928:	d14a      	bne.n	80019c0 <main_system+0xe0>
		{
			system_mode = MODE_2;
 800192a:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <main_system+0xf4>)
 800192c:	2202      	movs	r2, #2
 800192e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001930:	e046      	b.n	80019c0 <main_system+0xe0>
	case MODE_2:
		/*Increase the duration of led red*/
		blink_all_led_red();						/*Blink all the led red*/
 8001932:	f7ff fa0d 	bl	8000d50 <blink_all_led_red>
		update_led_buffer_1(2);						/*Update led_buffer_1 to display the mode*/
 8001936:	2002      	movs	r0, #2
 8001938:	f7ff f81c 	bl	8000974 <update_led_buffer_1>
		scan_led_1();
 800193c:	f7fe ff52 	bl	80007e4 <scan_led_1>
		increase_led_red_duration();
 8001940:	f000 f84c 	bl	80019dc <increase_led_red_duration>
		scan_led_2();
 8001944:	f7fe ffb2 	bl	80008ac <scan_led_2>

		if(isButtonPressed_1() == 1)
 8001948:	f7ff f85c 	bl	8000a04 <isButtonPressed_1>
 800194c:	4603      	mov	r3, r0
 800194e:	2b01      	cmp	r3, #1
 8001950:	d138      	bne.n	80019c4 <main_system+0xe4>
		{
			update_temp_duration();
 8001952:	f000 f8df 	bl	8001b14 <update_temp_duration>
			system_mode = MODE_3;
 8001956:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <main_system+0xf4>)
 8001958:	2203      	movs	r2, #3
 800195a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800195c:	e032      	b.n	80019c4 <main_system+0xe4>
	case MODE_3:
		/*Increase the duration of led yellow*/
		blink_all_led_yellow();						/*Blink all the led yellow*/
 800195e:	f7ff fa95 	bl	8000e8c <blink_all_led_yellow>
		update_led_buffer_1(3);						/*Update led_buffer_1 to display the mode*/
 8001962:	2003      	movs	r0, #3
 8001964:	f7ff f806 	bl	8000974 <update_led_buffer_1>
		scan_led_1();
 8001968:	f7fe ff3c 	bl	80007e4 <scan_led_1>
		increase_led_yellow_duration();
 800196c:	f000 f86a 	bl	8001a44 <increase_led_yellow_duration>
		scan_led_2();
 8001970:	f7fe ff9c 	bl	80008ac <scan_led_2>

		if(isButtonPressed_1() == 1)
 8001974:	f7ff f846 	bl	8000a04 <isButtonPressed_1>
 8001978:	4603      	mov	r3, r0
 800197a:	2b01      	cmp	r3, #1
 800197c:	d124      	bne.n	80019c8 <main_system+0xe8>
		{
			update_temp_duration();
 800197e:	f000 f8c9 	bl	8001b14 <update_temp_duration>
			system_mode = MODE_4;
 8001982:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <main_system+0xf4>)
 8001984:	2204      	movs	r2, #4
 8001986:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001988:	e01e      	b.n	80019c8 <main_system+0xe8>
	case MODE_4:
		/*Increase the duration of led green*/
		blink_all_led_green();						/*Blink all the led green*/
 800198a:	f7ff fb1d 	bl	8000fc8 <blink_all_led_green>
		update_led_buffer_1(4);						/*Update led_buffer_1 to display the mode*/
 800198e:	2004      	movs	r0, #4
 8001990:	f7fe fff0 	bl	8000974 <update_led_buffer_1>
		scan_led_1();
 8001994:	f7fe ff26 	bl	80007e4 <scan_led_1>
		increase_led_green_duration();				/*Increase the duration of the led green*/
 8001998:	f000 f888 	bl	8001aac <increase_led_green_duration>
		scan_led_2();
 800199c:	f7fe ff86 	bl	80008ac <scan_led_2>

		if(isButtonPressed_1() == 1)
 80019a0:	f7ff f830 	bl	8000a04 <isButtonPressed_1>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d110      	bne.n	80019cc <main_system+0xec>
		{
			traffic_light_status = TRAFFIC_LIGHT_INIT;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <main_system+0xf8>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
			update_temp_duration();
 80019b0:	f000 f8b0 	bl	8001b14 <update_temp_duration>
			system_mode = MODE_1;
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <main_system+0xf4>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80019ba:	e007      	b.n	80019cc <main_system+0xec>
	default:
		break;
 80019bc:	bf00      	nop
 80019be:	e006      	b.n	80019ce <main_system+0xee>
		break;
 80019c0:	bf00      	nop
 80019c2:	e004      	b.n	80019ce <main_system+0xee>
		break;
 80019c4:	bf00      	nop
 80019c6:	e002      	b.n	80019ce <main_system+0xee>
		break;
 80019c8:	bf00      	nop
 80019ca:	e000      	b.n	80019ce <main_system+0xee>
		break;
 80019cc:	bf00      	nop
	}
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000119 	.word	0x20000119
 80019d8:	20000118 	.word	0x20000118

080019dc <increase_led_red_duration>:

void increase_led_red_duration()
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	if(isButtonPressed_2() == 1)
 80019e0:	f7ff f884 	bl	8000aec <isButtonPressed_2>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d10c      	bne.n	8001a04 <increase_led_red_duration+0x28>
	{
		if(temp_led_red_duration < 99)
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <increase_led_red_duration+0x58>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b62      	cmp	r3, #98	; 0x62
 80019f0:	dc05      	bgt.n	80019fe <increase_led_red_duration+0x22>
		{
			temp_led_red_duration += 1;
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <increase_led_red_duration+0x58>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	3301      	adds	r3, #1
 80019f8:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <increase_led_red_duration+0x58>)
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	e002      	b.n	8001a04 <increase_led_red_duration+0x28>
		}
		else
		{
			temp_led_red_duration = 0;
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <increase_led_red_duration+0x58>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
		}
	}
	if(isButtonPressed_3() == 1)
 8001a04:	f7ff f8e6 	bl	8000bd4 <isButtonPressed_3>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d10a      	bne.n	8001a24 <increase_led_red_duration+0x48>
	{
		led_red_duration = temp_led_red_duration;
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <increase_led_red_duration+0x58>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a09      	ldr	r2, [pc, #36]	; (8001a38 <increase_led_red_duration+0x5c>)
 8001a14:	6013      	str	r3, [r2, #0]
		led_red_duration = led_yellow_duration + led_green_duration;
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <increase_led_red_duration+0x60>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <increase_led_red_duration+0x64>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <increase_led_red_duration+0x5c>)
 8001a22:	6013      	str	r3, [r2, #0]

	}
	update_led_buffer_2(temp_led_red_duration);
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <increase_led_red_duration+0x58>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe ffc7 	bl	80009bc <update_led_buffer_2>
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	2000004c 	.word	0x2000004c
 8001a38:	20000040 	.word	0x20000040
 8001a3c:	20000044 	.word	0x20000044
 8001a40:	20000048 	.word	0x20000048

08001a44 <increase_led_yellow_duration>:

void increase_led_yellow_duration()
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	if(isButtonPressed_2() == 1)
 8001a48:	f7ff f850 	bl	8000aec <isButtonPressed_2>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d10c      	bne.n	8001a6c <increase_led_yellow_duration+0x28>
	{
		if(temp_led_yellow_duration < 99)
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <increase_led_yellow_duration+0x58>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b62      	cmp	r3, #98	; 0x62
 8001a58:	dc05      	bgt.n	8001a66 <increase_led_yellow_duration+0x22>
		{
			temp_led_yellow_duration += 1;
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <increase_led_yellow_duration+0x58>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	4a0e      	ldr	r2, [pc, #56]	; (8001a9c <increase_led_yellow_duration+0x58>)
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	e002      	b.n	8001a6c <increase_led_yellow_duration+0x28>
		}
		else
		{
			temp_led_yellow_duration = 0;
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <increase_led_yellow_duration+0x58>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
		}
	}
	if(isButtonPressed_3() == 1)
 8001a6c:	f7ff f8b2 	bl	8000bd4 <isButtonPressed_3>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d10a      	bne.n	8001a8c <increase_led_yellow_duration+0x48>
	{
		led_yellow_duration = temp_led_yellow_duration;
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <increase_led_yellow_duration+0x58>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a09      	ldr	r2, [pc, #36]	; (8001aa0 <increase_led_yellow_duration+0x5c>)
 8001a7c:	6013      	str	r3, [r2, #0]
		led_red_duration = led_yellow_duration + led_green_duration;
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <increase_led_yellow_duration+0x5c>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <increase_led_yellow_duration+0x60>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	4a07      	ldr	r2, [pc, #28]	; (8001aa8 <increase_led_yellow_duration+0x64>)
 8001a8a:	6013      	str	r3, [r2, #0]
	}
	update_led_buffer_2(temp_led_yellow_duration);
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <increase_led_yellow_duration+0x58>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe ff93 	bl	80009bc <update_led_buffer_2>
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000050 	.word	0x20000050
 8001aa0:	20000044 	.word	0x20000044
 8001aa4:	20000048 	.word	0x20000048
 8001aa8:	20000040 	.word	0x20000040

08001aac <increase_led_green_duration>:

void increase_led_green_duration()
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	if(isButtonPressed_2() == 1)
 8001ab0:	f7ff f81c 	bl	8000aec <isButtonPressed_2>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d10c      	bne.n	8001ad4 <increase_led_green_duration+0x28>
	{
		if(temp_led_green_duration < 99)
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <increase_led_green_duration+0x58>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b62      	cmp	r3, #98	; 0x62
 8001ac0:	dc05      	bgt.n	8001ace <increase_led_green_duration+0x22>
		{
			temp_led_green_duration += 1;
 8001ac2:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <increase_led_green_duration+0x58>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	4a0e      	ldr	r2, [pc, #56]	; (8001b04 <increase_led_green_duration+0x58>)
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	e002      	b.n	8001ad4 <increase_led_green_duration+0x28>
		}
		else
		{
			temp_led_green_duration = 0;
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <increase_led_green_duration+0x58>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
		}
	}
	if(isButtonPressed_3() == 1)
 8001ad4:	f7ff f87e 	bl	8000bd4 <isButtonPressed_3>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d10a      	bne.n	8001af4 <increase_led_green_duration+0x48>
	{
		led_green_duration = temp_led_green_duration;
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <increase_led_green_duration+0x58>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <increase_led_green_duration+0x5c>)
 8001ae4:	6013      	str	r3, [r2, #0]
		led_red_duration = led_yellow_duration + led_green_duration;
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <increase_led_green_duration+0x60>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <increase_led_green_duration+0x5c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <increase_led_green_duration+0x64>)
 8001af2:	6013      	str	r3, [r2, #0]
	}
	update_led_buffer_2(temp_led_green_duration);
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <increase_led_green_duration+0x58>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe ff5f 	bl	80009bc <update_led_buffer_2>
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000054 	.word	0x20000054
 8001b08:	20000048 	.word	0x20000048
 8001b0c:	20000044 	.word	0x20000044
 8001b10:	20000040 	.word	0x20000040

08001b14 <update_temp_duration>:

void update_temp_duration()
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
	temp_led_red_duration = led_red_duration;
 8001b18:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <update_temp_duration+0x24>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <update_temp_duration+0x28>)
 8001b1e:	6013      	str	r3, [r2, #0]
	led_yellow_duration = temp_led_yellow_duration;
 8001b20:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <update_temp_duration+0x2c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a07      	ldr	r2, [pc, #28]	; (8001b44 <update_temp_duration+0x30>)
 8001b26:	6013      	str	r3, [r2, #0]
	led_green_duration = temp_led_green_duration;
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <update_temp_duration+0x34>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <update_temp_duration+0x38>)
 8001b2e:	6013      	str	r3, [r2, #0]
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	20000040 	.word	0x20000040
 8001b3c:	2000004c 	.word	0x2000004c
 8001b40:	20000050 	.word	0x20000050
 8001b44:	20000044 	.word	0x20000044
 8001b48:	20000054 	.word	0x20000054
 8001b4c:	20000048 	.word	0x20000048

08001b50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b50:	f7ff fd6e 	bl	8001630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b54:	480b      	ldr	r0, [pc, #44]	; (8001b84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b56:	490c      	ldr	r1, [pc, #48]	; (8001b88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b58:	4a0c      	ldr	r2, [pc, #48]	; (8001b8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b5c:	e002      	b.n	8001b64 <LoopCopyDataInit>

08001b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b62:	3304      	adds	r3, #4

08001b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b68:	d3f9      	bcc.n	8001b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6a:	4a09      	ldr	r2, [pc, #36]	; (8001b90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b6c:	4c09      	ldr	r4, [pc, #36]	; (8001b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b70:	e001      	b.n	8001b76 <LoopFillZerobss>

08001b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b74:	3204      	adds	r2, #4

08001b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b78:	d3fb      	bcc.n	8001b72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f001 faf1 	bl	8003160 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b7e:	f7ff fac1 	bl	8001104 <main>
  bx lr
 8001b82:	4770      	bx	lr
  ldr r0, =_sdata
 8001b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b88:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001b8c:	080031fc 	.word	0x080031fc
  ldr r2, =_sbss
 8001b90:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001b94:	20000120 	.word	0x20000120

08001b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b98:	e7fe      	b.n	8001b98 <ADC1_2_IRQHandler>
	...

08001b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_Init+0x28>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_Init+0x28>)
 8001ba6:	f043 0310 	orr.w	r3, r3, #16
 8001baa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bac:	2003      	movs	r0, #3
 8001bae:	f000 f923 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb2:	200f      	movs	r0, #15
 8001bb4:	f000 f808 	bl	8001bc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb8:	f7ff fcc2 	bl	8001540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40022000 	.word	0x40022000

08001bc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_InitTick+0x54>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_InitTick+0x58>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f93b 	bl	8001e62 <HAL_SYSTICK_Config>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00e      	b.n	8001c14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b0f      	cmp	r3, #15
 8001bfa:	d80a      	bhi.n	8001c12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
 8001c04:	f000 f903 	bl	8001e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c08:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <HAL_InitTick+0x5c>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e000      	b.n	8001c14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	2000003c 	.word	0x2000003c
 8001c20:	2000005c 	.word	0x2000005c
 8001c24:	20000058 	.word	0x20000058

08001c28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_IncTick+0x1c>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <HAL_IncTick+0x20>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a03      	ldr	r2, [pc, #12]	; (8001c48 <HAL_IncTick+0x20>)
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	2000005c 	.word	0x2000005c
 8001c48:	2000011c 	.word	0x2000011c

08001c4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c50:	4b02      	ldr	r3, [pc, #8]	; (8001c5c <HAL_GetTick+0x10>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	2000011c 	.word	0x2000011c

08001c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c92:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	60d3      	str	r3, [r2, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	f003 0307 	and.w	r3, r3, #7
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db0b      	blt.n	8001cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	4906      	ldr	r1, [pc, #24]	; (8001cf8 <__NVIC_EnableIRQ+0x34>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	e000e100 	.word	0xe000e100

08001cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db0a      	blt.n	8001d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	490c      	ldr	r1, [pc, #48]	; (8001d48 <__NVIC_SetPriority+0x4c>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d24:	e00a      	b.n	8001d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4908      	ldr	r1, [pc, #32]	; (8001d4c <__NVIC_SetPriority+0x50>)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3b04      	subs	r3, #4
 8001d34:	0112      	lsls	r2, r2, #4
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	440b      	add	r3, r1
 8001d3a:	761a      	strb	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f1c3 0307 	rsb	r3, r3, #7
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	bf28      	it	cs
 8001d6e:	2304      	movcs	r3, #4
 8001d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d902      	bls.n	8001d80 <NVIC_EncodePriority+0x30>
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3b03      	subs	r3, #3
 8001d7e:	e000      	b.n	8001d82 <NVIC_EncodePriority+0x32>
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	4313      	orrs	r3, r2
         );
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	; 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc4:	d301      	bcc.n	8001dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00f      	b.n	8001dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <SysTick_Config+0x40>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd2:	210f      	movs	r1, #15
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f7ff ff90 	bl	8001cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <SysTick_Config+0x40>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <SysTick_Config+0x40>)
 8001de4:	2207      	movs	r2, #7
 8001de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	e000e010 	.word	0xe000e010

08001df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff2d 	bl	8001c60 <__NVIC_SetPriorityGrouping>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e20:	f7ff ff42 	bl	8001ca8 <__NVIC_GetPriorityGrouping>
 8001e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f7ff ff90 	bl	8001d50 <NVIC_EncodePriority>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff5f 	bl	8001cfc <__NVIC_SetPriority>
}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff35 	bl	8001cc4 <__NVIC_EnableIRQ>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ffa2 	bl	8001db4 <SysTick_Config>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b08b      	sub	sp, #44	; 0x2c
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8e:	e161      	b.n	8002154 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e90:	2201      	movs	r2, #1
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	f040 8150 	bne.w	800214e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4a97      	ldr	r2, [pc, #604]	; (8002110 <HAL_GPIO_Init+0x294>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d05e      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001eb8:	4a95      	ldr	r2, [pc, #596]	; (8002110 <HAL_GPIO_Init+0x294>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d875      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ebe:	4a95      	ldr	r2, [pc, #596]	; (8002114 <HAL_GPIO_Init+0x298>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d058      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ec4:	4a93      	ldr	r2, [pc, #588]	; (8002114 <HAL_GPIO_Init+0x298>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d86f      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001eca:	4a93      	ldr	r2, [pc, #588]	; (8002118 <HAL_GPIO_Init+0x29c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d052      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ed0:	4a91      	ldr	r2, [pc, #580]	; (8002118 <HAL_GPIO_Init+0x29c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d869      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ed6:	4a91      	ldr	r2, [pc, #580]	; (800211c <HAL_GPIO_Init+0x2a0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d04c      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001edc:	4a8f      	ldr	r2, [pc, #572]	; (800211c <HAL_GPIO_Init+0x2a0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d863      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ee2:	4a8f      	ldr	r2, [pc, #572]	; (8002120 <HAL_GPIO_Init+0x2a4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d046      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
 8001ee8:	4a8d      	ldr	r2, [pc, #564]	; (8002120 <HAL_GPIO_Init+0x2a4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d85d      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001eee:	2b12      	cmp	r3, #18
 8001ef0:	d82a      	bhi.n	8001f48 <HAL_GPIO_Init+0xcc>
 8001ef2:	2b12      	cmp	r3, #18
 8001ef4:	d859      	bhi.n	8001faa <HAL_GPIO_Init+0x12e>
 8001ef6:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <HAL_GPIO_Init+0x80>)
 8001ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efc:	08001f77 	.word	0x08001f77
 8001f00:	08001f51 	.word	0x08001f51
 8001f04:	08001f63 	.word	0x08001f63
 8001f08:	08001fa5 	.word	0x08001fa5
 8001f0c:	08001fab 	.word	0x08001fab
 8001f10:	08001fab 	.word	0x08001fab
 8001f14:	08001fab 	.word	0x08001fab
 8001f18:	08001fab 	.word	0x08001fab
 8001f1c:	08001fab 	.word	0x08001fab
 8001f20:	08001fab 	.word	0x08001fab
 8001f24:	08001fab 	.word	0x08001fab
 8001f28:	08001fab 	.word	0x08001fab
 8001f2c:	08001fab 	.word	0x08001fab
 8001f30:	08001fab 	.word	0x08001fab
 8001f34:	08001fab 	.word	0x08001fab
 8001f38:	08001fab 	.word	0x08001fab
 8001f3c:	08001fab 	.word	0x08001fab
 8001f40:	08001f59 	.word	0x08001f59
 8001f44:	08001f6d 	.word	0x08001f6d
 8001f48:	4a76      	ldr	r2, [pc, #472]	; (8002124 <HAL_GPIO_Init+0x2a8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f4e:	e02c      	b.n	8001faa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	623b      	str	r3, [r7, #32]
          break;
 8001f56:	e029      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	623b      	str	r3, [r7, #32]
          break;
 8001f60:	e024      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	3308      	adds	r3, #8
 8001f68:	623b      	str	r3, [r7, #32]
          break;
 8001f6a:	e01f      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	330c      	adds	r3, #12
 8001f72:	623b      	str	r3, [r7, #32]
          break;
 8001f74:	e01a      	b.n	8001fac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	623b      	str	r3, [r7, #32]
          break;
 8001f82:	e013      	b.n	8001fac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d105      	bne.n	8001f98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	611a      	str	r2, [r3, #16]
          break;
 8001f96:	e009      	b.n	8001fac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f98:	2308      	movs	r3, #8
 8001f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	615a      	str	r2, [r3, #20]
          break;
 8001fa2:	e003      	b.n	8001fac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	623b      	str	r3, [r7, #32]
          break;
 8001fa8:	e000      	b.n	8001fac <HAL_GPIO_Init+0x130>
          break;
 8001faa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2bff      	cmp	r3, #255	; 0xff
 8001fb0:	d801      	bhi.n	8001fb6 <HAL_GPIO_Init+0x13a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	e001      	b.n	8001fba <HAL_GPIO_Init+0x13e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3304      	adds	r3, #4
 8001fba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2bff      	cmp	r3, #255	; 0xff
 8001fc0:	d802      	bhi.n	8001fc8 <HAL_GPIO_Init+0x14c>
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	e002      	b.n	8001fce <HAL_GPIO_Init+0x152>
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	3b08      	subs	r3, #8
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	210f      	movs	r1, #15
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	401a      	ands	r2, r3
 8001fe0:	6a39      	ldr	r1, [r7, #32]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 80a9 	beq.w	800214e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ffc:	4b4a      	ldr	r3, [pc, #296]	; (8002128 <HAL_GPIO_Init+0x2ac>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	4a49      	ldr	r2, [pc, #292]	; (8002128 <HAL_GPIO_Init+0x2ac>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6193      	str	r3, [r2, #24]
 8002008:	4b47      	ldr	r3, [pc, #284]	; (8002128 <HAL_GPIO_Init+0x2ac>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002014:	4a45      	ldr	r2, [pc, #276]	; (800212c <HAL_GPIO_Init+0x2b0>)
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002020:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	220f      	movs	r2, #15
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4013      	ands	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3d      	ldr	r2, [pc, #244]	; (8002130 <HAL_GPIO_Init+0x2b4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00d      	beq.n	800205c <HAL_GPIO_Init+0x1e0>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a3c      	ldr	r2, [pc, #240]	; (8002134 <HAL_GPIO_Init+0x2b8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d007      	beq.n	8002058 <HAL_GPIO_Init+0x1dc>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a3b      	ldr	r2, [pc, #236]	; (8002138 <HAL_GPIO_Init+0x2bc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d101      	bne.n	8002054 <HAL_GPIO_Init+0x1d8>
 8002050:	2302      	movs	r3, #2
 8002052:	e004      	b.n	800205e <HAL_GPIO_Init+0x1e2>
 8002054:	2303      	movs	r3, #3
 8002056:	e002      	b.n	800205e <HAL_GPIO_Init+0x1e2>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <HAL_GPIO_Init+0x1e2>
 800205c:	2300      	movs	r3, #0
 800205e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002060:	f002 0203 	and.w	r2, r2, #3
 8002064:	0092      	lsls	r2, r2, #2
 8002066:	4093      	lsls	r3, r2
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800206e:	492f      	ldr	r1, [pc, #188]	; (800212c <HAL_GPIO_Init+0x2b0>)
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d006      	beq.n	8002096 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002088:	4b2c      	ldr	r3, [pc, #176]	; (800213c <HAL_GPIO_Init+0x2c0>)
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	492b      	ldr	r1, [pc, #172]	; (800213c <HAL_GPIO_Init+0x2c0>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	608b      	str	r3, [r1, #8]
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002096:	4b29      	ldr	r3, [pc, #164]	; (800213c <HAL_GPIO_Init+0x2c0>)
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	43db      	mvns	r3, r3
 800209e:	4927      	ldr	r1, [pc, #156]	; (800213c <HAL_GPIO_Init+0x2c0>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d006      	beq.n	80020be <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020b0:	4b22      	ldr	r3, [pc, #136]	; (800213c <HAL_GPIO_Init+0x2c0>)
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	4921      	ldr	r1, [pc, #132]	; (800213c <HAL_GPIO_Init+0x2c0>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60cb      	str	r3, [r1, #12]
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020be:	4b1f      	ldr	r3, [pc, #124]	; (800213c <HAL_GPIO_Init+0x2c0>)
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	491d      	ldr	r1, [pc, #116]	; (800213c <HAL_GPIO_Init+0x2c0>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d006      	beq.n	80020e6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020d8:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_GPIO_Init+0x2c0>)
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	4917      	ldr	r1, [pc, #92]	; (800213c <HAL_GPIO_Init+0x2c0>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_GPIO_Init+0x2c0>)
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	4913      	ldr	r1, [pc, #76]	; (800213c <HAL_GPIO_Init+0x2c0>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d01f      	beq.n	8002140 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_GPIO_Init+0x2c0>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	490d      	ldr	r1, [pc, #52]	; (800213c <HAL_GPIO_Init+0x2c0>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	600b      	str	r3, [r1, #0]
 800210c:	e01f      	b.n	800214e <HAL_GPIO_Init+0x2d2>
 800210e:	bf00      	nop
 8002110:	10320000 	.word	0x10320000
 8002114:	10310000 	.word	0x10310000
 8002118:	10220000 	.word	0x10220000
 800211c:	10210000 	.word	0x10210000
 8002120:	10120000 	.word	0x10120000
 8002124:	10110000 	.word	0x10110000
 8002128:	40021000 	.word	0x40021000
 800212c:	40010000 	.word	0x40010000
 8002130:	40010800 	.word	0x40010800
 8002134:	40010c00 	.word	0x40010c00
 8002138:	40011000 	.word	0x40011000
 800213c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_GPIO_Init+0x2f4>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	43db      	mvns	r3, r3
 8002148:	4909      	ldr	r1, [pc, #36]	; (8002170 <HAL_GPIO_Init+0x2f4>)
 800214a:	4013      	ands	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	3301      	adds	r3, #1
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	fa22 f303 	lsr.w	r3, r2, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	f47f ae96 	bne.w	8001e90 <HAL_GPIO_Init+0x14>
  }
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	372c      	adds	r7, #44	; 0x2c
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	40010400 	.word	0x40010400

08002174 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	887b      	ldrh	r3, [r7, #2]
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
 8002190:	e001      	b.n	8002196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002196:	7bfb      	ldrb	r3, [r7, #15]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	807b      	strh	r3, [r7, #2]
 80021ae:	4613      	mov	r3, r2
 80021b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021b2:	787b      	ldrb	r3, [r7, #1]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b8:	887a      	ldrh	r2, [r7, #2]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021be:	e003      	b.n	80021c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021c0:	887b      	ldrh	r3, [r7, #2]
 80021c2:	041a      	lsls	r2, r3, #16
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	611a      	str	r2, [r3, #16]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
	...

080021d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e272      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8087 	beq.w	8002302 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f4:	4b92      	ldr	r3, [pc, #584]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 030c 	and.w	r3, r3, #12
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d00c      	beq.n	800221a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002200:	4b8f      	ldr	r3, [pc, #572]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b08      	cmp	r3, #8
 800220a:	d112      	bne.n	8002232 <HAL_RCC_OscConfig+0x5e>
 800220c:	4b8c      	ldr	r3, [pc, #560]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002218:	d10b      	bne.n	8002232 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221a:	4b89      	ldr	r3, [pc, #548]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d06c      	beq.n	8002300 <HAL_RCC_OscConfig+0x12c>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d168      	bne.n	8002300 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e24c      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223a:	d106      	bne.n	800224a <HAL_RCC_OscConfig+0x76>
 800223c:	4b80      	ldr	r3, [pc, #512]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a7f      	ldr	r2, [pc, #508]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	e02e      	b.n	80022a8 <HAL_RCC_OscConfig+0xd4>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10c      	bne.n	800226c <HAL_RCC_OscConfig+0x98>
 8002252:	4b7b      	ldr	r3, [pc, #492]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a7a      	ldr	r2, [pc, #488]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	4b78      	ldr	r3, [pc, #480]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a77      	ldr	r2, [pc, #476]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e01d      	b.n	80022a8 <HAL_RCC_OscConfig+0xd4>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0xbc>
 8002276:	4b72      	ldr	r3, [pc, #456]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a71      	ldr	r2, [pc, #452]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800227c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4b6f      	ldr	r3, [pc, #444]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a6e      	ldr	r2, [pc, #440]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e00b      	b.n	80022a8 <HAL_RCC_OscConfig+0xd4>
 8002290:	4b6b      	ldr	r3, [pc, #428]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a6a      	ldr	r2, [pc, #424]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	4b68      	ldr	r3, [pc, #416]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a67      	ldr	r2, [pc, #412]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d013      	beq.n	80022d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7ff fccc 	bl	8001c4c <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b8:	f7ff fcc8 	bl	8001c4c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b64      	cmp	r3, #100	; 0x64
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e200      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ca:	4b5d      	ldr	r3, [pc, #372]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0xe4>
 80022d6:	e014      	b.n	8002302 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7ff fcb8 	bl	8001c4c <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e0:	f7ff fcb4 	bl	8001c4c <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	; 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e1ec      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f2:	4b53      	ldr	r3, [pc, #332]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x10c>
 80022fe:	e000      	b.n	8002302 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d063      	beq.n	80023d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800230e:	4b4c      	ldr	r3, [pc, #304]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00b      	beq.n	8002332 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800231a:	4b49      	ldr	r3, [pc, #292]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b08      	cmp	r3, #8
 8002324:	d11c      	bne.n	8002360 <HAL_RCC_OscConfig+0x18c>
 8002326:	4b46      	ldr	r3, [pc, #280]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d116      	bne.n	8002360 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002332:	4b43      	ldr	r3, [pc, #268]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d005      	beq.n	800234a <HAL_RCC_OscConfig+0x176>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d001      	beq.n	800234a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e1c0      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234a:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4939      	ldr	r1, [pc, #228]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235e:	e03a      	b.n	80023d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d020      	beq.n	80023aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002368:	4b36      	ldr	r3, [pc, #216]	; (8002444 <HAL_RCC_OscConfig+0x270>)
 800236a:	2201      	movs	r2, #1
 800236c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7ff fc6d 	bl	8001c4c <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002376:	f7ff fc69 	bl	8001c4c <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e1a1      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002388:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002394:	4b2a      	ldr	r3, [pc, #168]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4927      	ldr	r1, [pc, #156]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]
 80023a8:	e015      	b.n	80023d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023aa:	4b26      	ldr	r3, [pc, #152]	; (8002444 <HAL_RCC_OscConfig+0x270>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7ff fc4c 	bl	8001c4c <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b8:	f7ff fc48 	bl	8001c4c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e180      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ca:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d03a      	beq.n	8002458 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d019      	beq.n	800241e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ea:	4b17      	ldr	r3, [pc, #92]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f0:	f7ff fc2c 	bl	8001c4c <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f8:	f7ff fc28 	bl	8001c4c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e160      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <HAL_RCC_OscConfig+0x26c>)
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002416:	2001      	movs	r0, #1
 8002418:	f000 fa9c 	bl	8002954 <RCC_Delay>
 800241c:	e01c      	b.n	8002458 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800241e:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <HAL_RCC_OscConfig+0x274>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002424:	f7ff fc12 	bl	8001c4c <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242a:	e00f      	b.n	800244c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242c:	f7ff fc0e 	bl	8001c4c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d908      	bls.n	800244c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e146      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	42420000 	.word	0x42420000
 8002448:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	4b92      	ldr	r3, [pc, #584]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1e9      	bne.n	800242c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80a6 	beq.w	80025b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246a:	4b8b      	ldr	r3, [pc, #556]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10d      	bne.n	8002492 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	4b88      	ldr	r3, [pc, #544]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	4a87      	ldr	r2, [pc, #540]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 800247c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002480:	61d3      	str	r3, [r2, #28]
 8002482:	4b85      	ldr	r3, [pc, #532]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248e:	2301      	movs	r3, #1
 8002490:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002492:	4b82      	ldr	r3, [pc, #520]	; (800269c <HAL_RCC_OscConfig+0x4c8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d118      	bne.n	80024d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800249e:	4b7f      	ldr	r3, [pc, #508]	; (800269c <HAL_RCC_OscConfig+0x4c8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a7e      	ldr	r2, [pc, #504]	; (800269c <HAL_RCC_OscConfig+0x4c8>)
 80024a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024aa:	f7ff fbcf 	bl	8001c4c <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b2:	f7ff fbcb 	bl	8001c4c <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b64      	cmp	r3, #100	; 0x64
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e103      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c4:	4b75      	ldr	r3, [pc, #468]	; (800269c <HAL_RCC_OscConfig+0x4c8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_OscConfig+0x312>
 80024d8:	4b6f      	ldr	r3, [pc, #444]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4a6e      	ldr	r2, [pc, #440]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	6213      	str	r3, [r2, #32]
 80024e4:	e02d      	b.n	8002542 <HAL_RCC_OscConfig+0x36e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0x334>
 80024ee:	4b6a      	ldr	r3, [pc, #424]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	4a69      	ldr	r2, [pc, #420]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	6213      	str	r3, [r2, #32]
 80024fa:	4b67      	ldr	r3, [pc, #412]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	4a66      	ldr	r2, [pc, #408]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	f023 0304 	bic.w	r3, r3, #4
 8002504:	6213      	str	r3, [r2, #32]
 8002506:	e01c      	b.n	8002542 <HAL_RCC_OscConfig+0x36e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b05      	cmp	r3, #5
 800250e:	d10c      	bne.n	800252a <HAL_RCC_OscConfig+0x356>
 8002510:	4b61      	ldr	r3, [pc, #388]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	4a60      	ldr	r2, [pc, #384]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	6213      	str	r3, [r2, #32]
 800251c:	4b5e      	ldr	r3, [pc, #376]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	4a5d      	ldr	r2, [pc, #372]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6213      	str	r3, [r2, #32]
 8002528:	e00b      	b.n	8002542 <HAL_RCC_OscConfig+0x36e>
 800252a:	4b5b      	ldr	r3, [pc, #364]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4a5a      	ldr	r2, [pc, #360]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	6213      	str	r3, [r2, #32]
 8002536:	4b58      	ldr	r3, [pc, #352]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4a57      	ldr	r2, [pc, #348]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	f023 0304 	bic.w	r3, r3, #4
 8002540:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d015      	beq.n	8002576 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254a:	f7ff fb7f 	bl	8001c4c <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002550:	e00a      	b.n	8002568 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002552:	f7ff fb7b 	bl	8001c4c <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002560:	4293      	cmp	r3, r2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e0b1      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002568:	4b4b      	ldr	r3, [pc, #300]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0ee      	beq.n	8002552 <HAL_RCC_OscConfig+0x37e>
 8002574:	e014      	b.n	80025a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002576:	f7ff fb69 	bl	8001c4c <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257c:	e00a      	b.n	8002594 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257e:	f7ff fb65 	bl	8001c4c <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	f241 3288 	movw	r2, #5000	; 0x1388
 800258c:	4293      	cmp	r3, r2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e09b      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002594:	4b40      	ldr	r3, [pc, #256]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1ee      	bne.n	800257e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d105      	bne.n	80025b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a6:	4b3c      	ldr	r3, [pc, #240]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	4a3b      	ldr	r2, [pc, #236]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 8087 	beq.w	80026ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025bc:	4b36      	ldr	r3, [pc, #216]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d061      	beq.n	800268c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d146      	bne.n	800265e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d0:	4b33      	ldr	r3, [pc, #204]	; (80026a0 <HAL_RCC_OscConfig+0x4cc>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d6:	f7ff fb39 	bl	8001c4c <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025de:	f7ff fb35 	bl	8001c4c <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e06d      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f0:	4b29      	ldr	r3, [pc, #164]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002604:	d108      	bne.n	8002618 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002606:	4b24      	ldr	r3, [pc, #144]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	4921      	ldr	r1, [pc, #132]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002618:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a19      	ldr	r1, [r3, #32]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	430b      	orrs	r3, r1
 800262a:	491b      	ldr	r1, [pc, #108]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002630:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <HAL_RCC_OscConfig+0x4cc>)
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7ff fb09 	bl	8001c4c <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263e:	f7ff fb05 	bl	8001c4c <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e03d      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x46a>
 800265c:	e035      	b.n	80026ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <HAL_RCC_OscConfig+0x4cc>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7ff faf2 	bl	8001c4c <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266c:	f7ff faee 	bl	8001c4c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e026      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_RCC_OscConfig+0x4c4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x498>
 800268a:	e01e      	b.n	80026ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d107      	bne.n	80026a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e019      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
 8002698:	40021000 	.word	0x40021000
 800269c:	40007000 	.word	0x40007000
 80026a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_RCC_OscConfig+0x500>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d106      	bne.n	80026c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d001      	beq.n	80026ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40021000 	.word	0x40021000

080026d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0d0      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026ec:	4b6a      	ldr	r3, [pc, #424]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d910      	bls.n	800271c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b67      	ldr	r3, [pc, #412]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 0207 	bic.w	r2, r3, #7
 8002702:	4965      	ldr	r1, [pc, #404]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b63      	ldr	r3, [pc, #396]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0b8      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d020      	beq.n	800276a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002734:	4b59      	ldr	r3, [pc, #356]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4a58      	ldr	r2, [pc, #352]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800273e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800274c:	4b53      	ldr	r3, [pc, #332]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4a52      	ldr	r2, [pc, #328]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002756:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002758:	4b50      	ldr	r3, [pc, #320]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	494d      	ldr	r1, [pc, #308]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d040      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277e:	4b47      	ldr	r3, [pc, #284]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d115      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e07f      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d107      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002796:	4b41      	ldr	r3, [pc, #260]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e073      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a6:	4b3d      	ldr	r3, [pc, #244]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e06b      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b6:	4b39      	ldr	r3, [pc, #228]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f023 0203 	bic.w	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4936      	ldr	r1, [pc, #216]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c8:	f7ff fa40 	bl	8001c4c <HAL_GetTick>
 80027cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d0:	f7ff fa3c 	bl	8001c4c <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	; 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e053      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	4b2d      	ldr	r3, [pc, #180]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 020c 	and.w	r2, r3, #12
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d1eb      	bne.n	80027d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d210      	bcs.n	8002828 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b24      	ldr	r3, [pc, #144]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 0207 	bic.w	r2, r3, #7
 800280e:	4922      	ldr	r1, [pc, #136]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b20      	ldr	r3, [pc, #128]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e032      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4916      	ldr	r1, [pc, #88]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002852:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	490e      	ldr	r1, [pc, #56]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002866:	f000 f821 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 800286a:	4602      	mov	r2, r0
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	490a      	ldr	r1, [pc, #40]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002878:	5ccb      	ldrb	r3, [r1, r3]
 800287a:	fa22 f303 	lsr.w	r3, r2, r3
 800287e:	4a09      	ldr	r2, [pc, #36]	; (80028a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f99e 	bl	8001bc8 <HAL_InitTick>

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40022000 	.word	0x40022000
 800289c:	40021000 	.word	0x40021000
 80028a0:	080031d0 	.word	0x080031d0
 80028a4:	2000003c 	.word	0x2000003c
 80028a8:	20000058 	.word	0x20000058

080028ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028c6:	4b1e      	ldr	r3, [pc, #120]	; (8002940 <HAL_RCC_GetSysClockFreq+0x94>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d002      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x30>
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d003      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x36>
 80028da:	e027      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028dc:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_RCC_GetSysClockFreq+0x98>)
 80028de:	613b      	str	r3, [r7, #16]
      break;
 80028e0:	e027      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	0c9b      	lsrs	r3, r3, #18
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	4a17      	ldr	r2, [pc, #92]	; (8002948 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028ec:	5cd3      	ldrb	r3, [r2, r3]
 80028ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d010      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028fa:	4b11      	ldr	r3, [pc, #68]	; (8002940 <HAL_RCC_GetSysClockFreq+0x94>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	0c5b      	lsrs	r3, r3, #17
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	4a11      	ldr	r2, [pc, #68]	; (800294c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002906:	5cd3      	ldrb	r3, [r2, r3]
 8002908:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a0d      	ldr	r2, [pc, #52]	; (8002944 <HAL_RCC_GetSysClockFreq+0x98>)
 800290e:	fb03 f202 	mul.w	r2, r3, r2
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	e004      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002920:	fb02 f303 	mul.w	r3, r2, r3
 8002924:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	613b      	str	r3, [r7, #16]
      break;
 800292a:	e002      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_RCC_GetSysClockFreq+0x98>)
 800292e:	613b      	str	r3, [r7, #16]
      break;
 8002930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002932:	693b      	ldr	r3, [r7, #16]
}
 8002934:	4618      	mov	r0, r3
 8002936:	371c      	adds	r7, #28
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	007a1200 	.word	0x007a1200
 8002948:	080031e0 	.word	0x080031e0
 800294c:	080031f0 	.word	0x080031f0
 8002950:	003d0900 	.word	0x003d0900

08002954 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800295c:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <RCC_Delay+0x34>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0a      	ldr	r2, [pc, #40]	; (800298c <RCC_Delay+0x38>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0a5b      	lsrs	r3, r3, #9
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	fb02 f303 	mul.w	r3, r2, r3
 800296e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002970:	bf00      	nop
  }
  while (Delay --);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1e5a      	subs	r2, r3, #1
 8002976:	60fa      	str	r2, [r7, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f9      	bne.n	8002970 <RCC_Delay+0x1c>
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	2000003c 	.word	0x2000003c
 800298c:	10624dd3 	.word	0x10624dd3

08002990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e041      	b.n	8002a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fe fde4 	bl	8001584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3304      	adds	r3, #4
 80029cc:	4619      	mov	r1, r3
 80029ce:	4610      	mov	r0, r2
 80029d0:	f000 fa6e 	bl	8002eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d001      	beq.n	8002a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e035      	b.n	8002ab4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a16      	ldr	r2, [pc, #88]	; (8002ac0 <HAL_TIM_Base_Start_IT+0x90>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d009      	beq.n	8002a7e <HAL_TIM_Base_Start_IT+0x4e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a72:	d004      	beq.n	8002a7e <HAL_TIM_Base_Start_IT+0x4e>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a12      	ldr	r2, [pc, #72]	; (8002ac4 <HAL_TIM_Base_Start_IT+0x94>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d111      	bne.n	8002aa2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b06      	cmp	r3, #6
 8002a8e:	d010      	beq.n	8002ab2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa0:	e007      	b.n	8002ab2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40012c00 	.word	0x40012c00
 8002ac4:	40000400 	.word	0x40000400

08002ac8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d122      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d11b      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0202 	mvn.w	r2, #2
 8002af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f9b4 	bl	8002e78 <HAL_TIM_IC_CaptureCallback>
 8002b10:	e005      	b.n	8002b1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f9a7 	bl	8002e66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f9b6 	bl	8002e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d122      	bne.n	8002b78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d11b      	bne.n	8002b78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0204 	mvn.w	r2, #4
 8002b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f98a 	bl	8002e78 <HAL_TIM_IC_CaptureCallback>
 8002b64:	e005      	b.n	8002b72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f97d 	bl	8002e66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f98c 	bl	8002e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d122      	bne.n	8002bcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f003 0308 	and.w	r3, r3, #8
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d11b      	bne.n	8002bcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f06f 0208 	mvn.w	r2, #8
 8002b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f960 	bl	8002e78 <HAL_TIM_IC_CaptureCallback>
 8002bb8:	e005      	b.n	8002bc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f953 	bl	8002e66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f962 	bl	8002e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	2b10      	cmp	r3, #16
 8002bd8:	d122      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b10      	cmp	r3, #16
 8002be6:	d11b      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f06f 0210 	mvn.w	r2, #16
 8002bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f936 	bl	8002e78 <HAL_TIM_IC_CaptureCallback>
 8002c0c:	e005      	b.n	8002c1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f929 	bl	8002e66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f938 	bl	8002e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d10e      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d107      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0201 	mvn.w	r2, #1
 8002c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fe fb6e 	bl	8001328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c56:	2b80      	cmp	r3, #128	; 0x80
 8002c58:	d10e      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c64:	2b80      	cmp	r3, #128	; 0x80
 8002c66:	d107      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fa6b 	bl	800314e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c82:	2b40      	cmp	r3, #64	; 0x40
 8002c84:	d10e      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c90:	2b40      	cmp	r3, #64	; 0x40
 8002c92:	d107      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f8fc 	bl	8002e9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d10e      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d107      	bne.n	8002cd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f06f 0220 	mvn.w	r2, #32
 8002cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fa36 	bl	800313c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_TIM_ConfigClockSource+0x1c>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e0b4      	b.n	8002e5e <HAL_TIM_ConfigClockSource+0x186>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2c:	d03e      	beq.n	8002dac <HAL_TIM_ConfigClockSource+0xd4>
 8002d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d32:	f200 8087 	bhi.w	8002e44 <HAL_TIM_ConfigClockSource+0x16c>
 8002d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3a:	f000 8086 	beq.w	8002e4a <HAL_TIM_ConfigClockSource+0x172>
 8002d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d42:	d87f      	bhi.n	8002e44 <HAL_TIM_ConfigClockSource+0x16c>
 8002d44:	2b70      	cmp	r3, #112	; 0x70
 8002d46:	d01a      	beq.n	8002d7e <HAL_TIM_ConfigClockSource+0xa6>
 8002d48:	2b70      	cmp	r3, #112	; 0x70
 8002d4a:	d87b      	bhi.n	8002e44 <HAL_TIM_ConfigClockSource+0x16c>
 8002d4c:	2b60      	cmp	r3, #96	; 0x60
 8002d4e:	d050      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x11a>
 8002d50:	2b60      	cmp	r3, #96	; 0x60
 8002d52:	d877      	bhi.n	8002e44 <HAL_TIM_ConfigClockSource+0x16c>
 8002d54:	2b50      	cmp	r3, #80	; 0x50
 8002d56:	d03c      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0xfa>
 8002d58:	2b50      	cmp	r3, #80	; 0x50
 8002d5a:	d873      	bhi.n	8002e44 <HAL_TIM_ConfigClockSource+0x16c>
 8002d5c:	2b40      	cmp	r3, #64	; 0x40
 8002d5e:	d058      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x13a>
 8002d60:	2b40      	cmp	r3, #64	; 0x40
 8002d62:	d86f      	bhi.n	8002e44 <HAL_TIM_ConfigClockSource+0x16c>
 8002d64:	2b30      	cmp	r3, #48	; 0x30
 8002d66:	d064      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x15a>
 8002d68:	2b30      	cmp	r3, #48	; 0x30
 8002d6a:	d86b      	bhi.n	8002e44 <HAL_TIM_ConfigClockSource+0x16c>
 8002d6c:	2b20      	cmp	r3, #32
 8002d6e:	d060      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x15a>
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d867      	bhi.n	8002e44 <HAL_TIM_ConfigClockSource+0x16c>
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d05c      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x15a>
 8002d78:	2b10      	cmp	r3, #16
 8002d7a:	d05a      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x15a>
 8002d7c:	e062      	b.n	8002e44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6899      	ldr	r1, [r3, #8]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f000 f95e 	bl	800304e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002da0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	609a      	str	r2, [r3, #8]
      break;
 8002daa:	e04f      	b.n	8002e4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6899      	ldr	r1, [r3, #8]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f000 f947 	bl	800304e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dce:	609a      	str	r2, [r3, #8]
      break;
 8002dd0:	e03c      	b.n	8002e4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6859      	ldr	r1, [r3, #4]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	461a      	mov	r2, r3
 8002de0:	f000 f8be 	bl	8002f60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2150      	movs	r1, #80	; 0x50
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 f915 	bl	800301a <TIM_ITRx_SetConfig>
      break;
 8002df0:	e02c      	b.n	8002e4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6859      	ldr	r1, [r3, #4]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f000 f8dc 	bl	8002fbc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2160      	movs	r1, #96	; 0x60
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 f905 	bl	800301a <TIM_ITRx_SetConfig>
      break;
 8002e10:	e01c      	b.n	8002e4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6859      	ldr	r1, [r3, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f000 f89e 	bl	8002f60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2140      	movs	r1, #64	; 0x40
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f8f5 	bl	800301a <TIM_ITRx_SetConfig>
      break;
 8002e30:	e00c      	b.n	8002e4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	f000 f8ec 	bl	800301a <TIM_ITRx_SetConfig>
      break;
 8002e42:	e003      	b.n	8002e4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
      break;
 8002e48:	e000      	b.n	8002e4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr

08002e8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr
	...

08002eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a25      	ldr	r2, [pc, #148]	; (8002f58 <TIM_Base_SetConfig+0xa8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d007      	beq.n	8002ed8 <TIM_Base_SetConfig+0x28>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ece:	d003      	beq.n	8002ed8 <TIM_Base_SetConfig+0x28>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a22      	ldr	r2, [pc, #136]	; (8002f5c <TIM_Base_SetConfig+0xac>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d108      	bne.n	8002eea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a1a      	ldr	r2, [pc, #104]	; (8002f58 <TIM_Base_SetConfig+0xa8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d007      	beq.n	8002f02 <TIM_Base_SetConfig+0x52>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef8:	d003      	beq.n	8002f02 <TIM_Base_SetConfig+0x52>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a17      	ldr	r2, [pc, #92]	; (8002f5c <TIM_Base_SetConfig+0xac>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d108      	bne.n	8002f14 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a07      	ldr	r2, [pc, #28]	; (8002f58 <TIM_Base_SetConfig+0xa8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d103      	bne.n	8002f48 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	615a      	str	r2, [r3, #20]
}
 8002f4e:	bf00      	nop
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr
 8002f58:	40012c00 	.word	0x40012c00
 8002f5c:	40000400 	.word	0x40000400

08002f60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	f023 0201 	bic.w	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f023 030a 	bic.w	r3, r3, #10
 8002f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	621a      	str	r2, [r3, #32]
}
 8002fb2:	bf00      	nop
 8002fb4:	371c      	adds	r7, #28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	f023 0210 	bic.w	r2, r3, #16
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	031b      	lsls	r3, r3, #12
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	621a      	str	r2, [r3, #32]
}
 8003010:	bf00      	nop
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr

0800301a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800301a:	b480      	push	{r7}
 800301c:	b085      	sub	sp, #20
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003030:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	f043 0307 	orr.w	r3, r3, #7
 800303c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	609a      	str	r2, [r3, #8]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr

0800304e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800304e:	b480      	push	{r7}
 8003050:	b087      	sub	sp, #28
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003068:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	021a      	lsls	r2, r3, #8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	431a      	orrs	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4313      	orrs	r3, r2
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	609a      	str	r2, [r3, #8]
}
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e041      	b.n	8003128 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a14      	ldr	r2, [pc, #80]	; (8003134 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d009      	beq.n	80030fc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f0:	d004      	beq.n	80030fc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a10      	ldr	r2, [pc, #64]	; (8003138 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d10c      	bne.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003102:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	4313      	orrs	r3, r2
 800310c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40012c00 	.word	0x40012c00
 8003138:	40000400 	.word	0x40000400

0800313c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr

0800314e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <__libc_init_array>:
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	2600      	movs	r6, #0
 8003164:	4d0c      	ldr	r5, [pc, #48]	; (8003198 <__libc_init_array+0x38>)
 8003166:	4c0d      	ldr	r4, [pc, #52]	; (800319c <__libc_init_array+0x3c>)
 8003168:	1b64      	subs	r4, r4, r5
 800316a:	10a4      	asrs	r4, r4, #2
 800316c:	42a6      	cmp	r6, r4
 800316e:	d109      	bne.n	8003184 <__libc_init_array+0x24>
 8003170:	f000 f822 	bl	80031b8 <_init>
 8003174:	2600      	movs	r6, #0
 8003176:	4d0a      	ldr	r5, [pc, #40]	; (80031a0 <__libc_init_array+0x40>)
 8003178:	4c0a      	ldr	r4, [pc, #40]	; (80031a4 <__libc_init_array+0x44>)
 800317a:	1b64      	subs	r4, r4, r5
 800317c:	10a4      	asrs	r4, r4, #2
 800317e:	42a6      	cmp	r6, r4
 8003180:	d105      	bne.n	800318e <__libc_init_array+0x2e>
 8003182:	bd70      	pop	{r4, r5, r6, pc}
 8003184:	f855 3b04 	ldr.w	r3, [r5], #4
 8003188:	4798      	blx	r3
 800318a:	3601      	adds	r6, #1
 800318c:	e7ee      	b.n	800316c <__libc_init_array+0xc>
 800318e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003192:	4798      	blx	r3
 8003194:	3601      	adds	r6, #1
 8003196:	e7f2      	b.n	800317e <__libc_init_array+0x1e>
 8003198:	080031f4 	.word	0x080031f4
 800319c:	080031f4 	.word	0x080031f4
 80031a0:	080031f4 	.word	0x080031f4
 80031a4:	080031f8 	.word	0x080031f8

080031a8 <memset>:
 80031a8:	4603      	mov	r3, r0
 80031aa:	4402      	add	r2, r0
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d100      	bne.n	80031b2 <memset+0xa>
 80031b0:	4770      	bx	lr
 80031b2:	f803 1b01 	strb.w	r1, [r3], #1
 80031b6:	e7f9      	b.n	80031ac <memset+0x4>

080031b8 <_init>:
 80031b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ba:	bf00      	nop
 80031bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031be:	bc08      	pop	{r3}
 80031c0:	469e      	mov	lr, r3
 80031c2:	4770      	bx	lr

080031c4 <_fini>:
 80031c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c6:	bf00      	nop
 80031c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ca:	bc08      	pop	{r3}
 80031cc:	469e      	mov	lr, r3
 80031ce:	4770      	bx	lr
